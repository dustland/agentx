agentx.event.middleware
=======================

.. py:module:: agentx.event.middleware

.. autoapi-nested-parse::

   Event middleware for the AgentX event system.

   Provides middleware components for logging, metrics, and custom event processing.



Attributes
----------

.. autoapisummary::

   agentx.event.middleware.logger


Classes
-------

.. autoapisummary::

   agentx.event.middleware.CorrelationMiddleware
   agentx.event.middleware.EventMiddleware
   agentx.event.middleware.FilterMiddleware
   agentx.event.middleware.LoggingMiddleware
   agentx.event.middleware.MetricsMiddleware


Module Contents
---------------

.. py:class:: CorrelationMiddleware

   Bases: :py:obj:`EventMiddleware`


   Middleware for handling event correlation and tracing.


   .. py:method:: after_process(event: agentx.event.types.Event) -> None
      :async:


      Track correlation after processing.



   .. py:method:: before_process(event: agentx.event.types.Event) -> None
      :async:


      Track correlation before processing.



   .. py:method:: before_publish(event: agentx.event.types.Event) -> None
      :async:


      Track correlation before publishing.



   .. py:method:: cleanup_old_correlations(max_age_hours: int = 24) -> None

      Clean up old correlation traces.



   .. py:method:: get_correlation_trace(correlation_id: str) -> Optional[list]

      Get the trace for a correlation ID.



   .. py:method:: on_error(event: agentx.event.types.Event, error: Exception) -> None
      :async:


      Track correlation on error.



   .. py:attribute:: correlation_map
      :type:  Dict[str, list]


.. py:class:: EventMiddleware

   Bases: :py:obj:`abc.ABC`


   Base class for event middleware.


   .. py:method:: after_process(event: agentx.event.types.Event) -> None
      :abstractmethod:

      :async:


      Called after an event is processed.



   .. py:method:: before_process(event: agentx.event.types.Event) -> None
      :abstractmethod:

      :async:


      Called before an event is processed.



   .. py:method:: before_publish(event: agentx.event.types.Event) -> None
      :abstractmethod:

      :async:


      Called before an event is published.



   .. py:method:: on_error(event: agentx.event.types.Event, error: Exception) -> None
      :abstractmethod:

      :async:


      Called when an error occurs during event processing.



.. py:class:: FilterMiddleware(filter_func: callable)

   Bases: :py:obj:`EventMiddleware`


   Middleware for filtering events based on custom criteria.


   .. py:method:: after_process(event: agentx.event.types.Event) -> None
      :async:


      No action needed after processing.



   .. py:method:: before_process(event: agentx.event.types.Event) -> None
      :async:


      Apply filter before processing.



   .. py:method:: before_publish(event: agentx.event.types.Event) -> None
      :async:


      Apply filter before publishing.



   .. py:method:: on_error(event: agentx.event.types.Event, error: Exception) -> None
      :async:


      No action needed on error.



   .. py:attribute:: filter_func


.. py:class:: LoggingMiddleware(log_level: int = logging.INFO)

   Bases: :py:obj:`EventMiddleware`


   Middleware for logging events.


   .. py:method:: after_process(event: agentx.event.types.Event) -> None
      :async:


      Log event processing completion.



   .. py:method:: before_process(event: agentx.event.types.Event) -> None
      :async:


      Log event processing start.



   .. py:method:: before_publish(event: agentx.event.types.Event) -> None
      :async:


      Log event publication.



   .. py:method:: on_error(event: agentx.event.types.Event, error: Exception) -> None
      :async:


      Log event processing error.



   .. py:attribute:: log_level
      :value: 20



   .. py:attribute:: logger


.. py:class:: MetricsMiddleware

   Bases: :py:obj:`EventMiddleware`


   Middleware for collecting event metrics.


   .. py:method:: after_process(event: agentx.event.types.Event) -> None
      :async:


      Record processing completion metrics.



   .. py:method:: before_process(event: agentx.event.types.Event) -> None
      :async:


      Record processing start time.



   .. py:method:: before_publish(event: agentx.event.types.Event) -> None
      :async:


      Record event publication metrics.



   .. py:method:: get_metrics() -> Dict[str, Any]

      Get current metrics.



   .. py:method:: on_error(event: agentx.event.types.Event, error: Exception) -> None
      :async:


      Record error metrics.



   .. py:method:: reset_metrics() -> None

      Reset all metrics.



   .. py:attribute:: metrics
      :type:  Dict[str, Any]


.. py:data:: logger

