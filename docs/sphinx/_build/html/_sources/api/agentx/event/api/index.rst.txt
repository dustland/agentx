agentx.event.api
================

.. py:module:: agentx.event.api

.. autoapi-nested-parse::

   Simple API for the AgentX event system.

   This module provides clean, simple functions for event publishing and subscribing
   without exposing the underlying event bus implementation.



Functions
---------

.. autoapisummary::

   agentx.event.api.get_active_subscriptions
   agentx.event.api.get_event_stats
   agentx.event.api.get_event_system_health
   agentx.event.api.publish_agent_event
   agentx.event.api.publish_event
   agentx.event.api.publish_event_sync
   agentx.event.api.publish_task_event
   agentx.event.api.publish_tool_event
   agentx.event.api.subscribe_to_events
   agentx.event.api.unsubscribe_from_events


Module Contents
---------------

.. py:function:: get_active_subscriptions() -> Dict[str, List[str]]

   Get current active subscriptions by event type.

   :returns: Dictionary mapping event types to lists of subscription IDs

   .. rubric:: Example

   ```python
   from agentx.event import get_active_subscriptions

   subscriptions = get_active_subscriptions()
   for event_type, sub_ids in subscriptions.items():
       print(f"{event_type}: {len(sub_ids)} subscribers")
   ```


.. py:function:: get_event_stats() -> agentx.event.types.EventBusStats

   Get event system statistics.

   :returns: EventBusStats object with current statistics

   .. rubric:: Example

   ```python
   from agentx.event import get_event_stats

   stats = get_event_stats()
   print(f"Total events published: {stats.total_events_published}")
   print(f"Total events processed: {stats.total_events_processed}")
   print(f"Active subscriptions: {stats.active_subscriptions}")
   ```


.. py:function:: get_event_system_health() -> Dict[str, Any]
   :async:


   Get event system health information.

   :returns: Dictionary with health information

   .. rubric:: Example

   ```python
   from agentx.event import get_event_system_health

   health = await get_event_system_health()
   print(f"Event system running: {health['running']}")
   print(f"Queue size: {health['queue_size']}")
   ```


.. py:function:: publish_agent_event(event_data: Any, agent_name: str, task_id: Optional[str] = None, **kwargs) -> str
   :async:


   Convenience function for publishing agent-related events.

   :param event_data: Agent event data
   :param agent_name: Agent name
   :param task_id: Optional task ID for correlation
   :param \*\*kwargs: Additional arguments passed to publish_event

   :returns: Event ID


.. py:function:: publish_event(event_data: Any, event_type: Optional[str] = None, priority: agentx.event.types.EventPriority = EventPriority.NORMAL, source: Optional[str] = None, correlation_id: Optional[str] = None, tags: Optional[Dict[str, str]] = None) -> str
   :async:


       Publish an event to the event system.

       Args:
           event_data: Event data (should be a Pydantic model)
           event_type: Optional event type override
           priority: Event priority (LOW, NORMAL, HIGH, CRITICAL)
           source: Event source identifier
           correlation_id: Correlation ID for tracing related events
           tags: Additional tags for filtering and categorization

       Returns:
           Event ID

       Example:
           ```python
           from agentx.event import publish_event
   from .models import TaskStartEvent

           event_id = await publish_event(
               TaskStartEvent(
                   task_id="task123",
                   timestamp=datetime.now(),
                   initial_prompt="Hello world",
                   execution_mode="autonomous",
                   team_config={}
               ),
               source="orchestrator",
               correlation_id="session_abc"
           )
           ```



.. py:function:: publish_event_sync(event_data: Any, event_type: Optional[str] = None, priority: agentx.event.types.EventPriority = EventPriority.NORMAL, source: Optional[str] = None, correlation_id: Optional[str] = None, tags: Optional[Dict[str, str]] = None) -> str

   Synchronous wrapper for publish_event.

   Note: This creates a task but doesn't wait for it in sync context.
   Use publish_event() in async contexts for proper awaiting.

   :param event_data: Event data (should be a Pydantic model)
   :param event_type: Optional event type override
   :param priority: Event priority (LOW, NORMAL, HIGH, CRITICAL)
   :param source: Event source identifier
   :param correlation_id: Correlation ID for tracing related events
   :param tags: Additional tags for filtering and categorization

   :returns: Event ID (or "pending" in async contexts)


.. py:function:: publish_task_event(event_data: Any, task_id: str, **kwargs) -> str
   :async:


   Convenience function for publishing task-related events.

   :param event_data: Task event data
   :param task_id: Task ID for correlation
   :param \*\*kwargs: Additional arguments passed to publish_event

   :returns: Event ID


.. py:function:: publish_tool_event(event_data: Any, tool_name: str, agent_name: Optional[str] = None, **kwargs) -> str
   :async:


   Convenience function for publishing tool-related events.

   :param event_data: Tool event data
   :param tool_name: Tool name
   :param agent_name: Optional agent name
   :param \*\*kwargs: Additional arguments passed to publish_event

   :returns: Event ID


.. py:function:: subscribe_to_events(event_types: Union[str, List[str]], handler: agentx.event.types.EventHandler, filter_func: Optional[agentx.event.types.EventFilter] = None, priority: agentx.event.types.EventPriority = EventPriority.NORMAL, subscription_id: Optional[str] = None) -> str

   Subscribe to events.

   :param event_types: Event type(s) to subscribe to
   :param handler: Event handler function (sync or async)
   :param filter_func: Optional filter function to apply to events
   :param priority: Subscription priority (higher priority handlers run first)
   :param subscription_id: Optional custom subscription ID

   :returns: Subscription ID

   .. rubric:: Example

   ```python
   from agentx.event import subscribe_to_events

   def handle_task_events(event_data):
       print(f"Task event: {event_data.type}")

   subscription_id = subscribe_to_events(
       event_types=["event_task_start", "event_task_complete"],
       handler=handle_task_events,
       priority=EventPriority.HIGH
   )
   ```


.. py:function:: unsubscribe_from_events(subscription_id: str) -> bool

   Unsubscribe from events.

   :param subscription_id: Subscription ID to remove

   :returns: True if subscription was found and removed

   .. rubric:: Example

   ```python
   from agentx.event import unsubscribe_from_events

   success = unsubscribe_from_events("my_subscription_123")
   if success:
       print("Successfully unsubscribed")
   ```


