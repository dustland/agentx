agentx.search
=============

.. py:module:: agentx.search

.. autoapi-nested-parse::

   AgentX Search Module

   Provides web search capabilities with multiple backend implementations.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /api/agentx/search/interfaces/index
   /api/agentx/search/search_manager/index
   /api/agentx/search/serpapi_backend/index


Classes
-------

.. autoapisummary::

   agentx.search.SearchBackend
   agentx.search.SearchManager
   agentx.search.SearchResponse
   agentx.search.SearchResult
   agentx.search.SerpAPIBackend


Package Contents
----------------

.. py:class:: SearchBackend

   Bases: :py:obj:`abc.ABC`


   Abstract base class for search backends.


   .. py:method:: is_available() -> bool
      :abstractmethod:


      Check if the backend is available and properly configured.



   .. py:method:: search(query: str, engine: str = 'google', max_results: int = 10, country: str = 'us', language: str = 'en', **kwargs) -> SearchResponse
      :abstractmethod:

      :async:


      Execute a search query.



   .. py:property:: name
      :type: str

      :abstractmethod:


      Backend name.


.. py:class:: SearchManager(default_backend: str = 'serpapi', **backend_configs)

   Manages multiple search backends and provides unified search interface.

   Initialize search manager.

   :param default_backend: Default backend to use for searches
   :param \*\*backend_configs: Configuration for different backends


   .. py:method:: add_backend(name: str, backend: agentx.search.interfaces.SearchBackend) -> None

      Add a new search backend.



   .. py:method:: get_backend(name: Optional[str] = None) -> agentx.search.interfaces.SearchBackend

      Get a search backend by name.



   .. py:method:: list_backends() -> Dict[str, bool]

      List all backends and their availability status.



   .. py:method:: search(query: str, backend: Optional[str] = None, **kwargs) -> agentx.search.interfaces.SearchResponse
      :async:


      Execute a search using the specified or default backend.

      :param query: Search query
      :param backend: Backend to use (defaults to default_backend)
      :param \*\*kwargs: Additional search parameters

      :returns: SearchResponse with results



   .. py:attribute:: backends
      :type:  Dict[str, agentx.search.interfaces.SearchBackend]


   .. py:attribute:: default_backend
      :value: 'serpapi'



.. py:class:: SearchResponse

   Represents a complete search response.


   .. py:attribute:: engine
      :type:  str


   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: query
      :type:  str


   .. py:attribute:: response_time
      :type:  float


   .. py:attribute:: results
      :type:  List[SearchResult]


   .. py:attribute:: success
      :type:  bool


   .. py:attribute:: timestamp
      :type:  str


   .. py:attribute:: total_results
      :type:  int


.. py:class:: SearchResult

   Represents a single search result.


   .. py:attribute:: date
      :type:  Optional[str]
      :value: None



   .. py:attribute:: displayed_link
      :type:  Optional[str]
      :value: None



   .. py:attribute:: language
      :type:  str
      :value: 'en'



   .. py:attribute:: position
      :type:  int


   .. py:attribute:: relevance_score
      :type:  float


   .. py:attribute:: snippet
      :type:  str


   .. py:attribute:: summary
      :type:  Optional[str]
      :value: None



   .. py:attribute:: title
      :type:  str


   .. py:attribute:: url
      :type:  str


.. py:class:: SerpAPIBackend(api_key: Optional[str] = None)

   Bases: :py:obj:`agentx.search.interfaces.SearchBackend`


   Search backend using SerpAPI service.

   Initialize SerpAPI backend.

   :param api_key: SerpAPI key. If not provided, uses SERPAPI_KEY environment variable.


   .. py:method:: is_available() -> bool

      Check if SerpAPI backend is available.



   .. py:method:: search(query: str, engine: str = 'google', max_results: int = 10, country: str = 'us', language: str = 'en', **kwargs) -> agentx.search.interfaces.SearchResponse
      :async:


      Execute search using SerpAPI.

      :param query: Search query
      :param engine: Search engine to use
      :param max_results: Maximum number of results (capped at 20)
      :param country: Country code for localization
      :param language: Language code for results
      :param \*\*kwargs: Additional search parameters

      :returns: SearchResponse with results and metadata



   .. py:attribute:: api_key


   .. py:property:: name
      :type: str


      Backend name.


