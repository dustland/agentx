agentx.config
=============

.. py:module:: agentx.config

.. autoapi-nested-parse::

   Configuration loading system for AgentX.

   Public API:
   - load_team_config: Load team configuration from YAML files (if needed)
   - MemoryConfig: Memory system configuration (used by memory backends)
   - TeamConfig, LLMProviderConfig: Core config models (if needed)

   Recommended usage:
       from agentx import execute_task
       result = execute_task("config_dir", "Your task here")



Submodules
----------

.. toctree::
   :maxdepth: 1

   /api/agentx/config/agent_loader/index
   /api/agentx/config/prompt_loader/index
   /api/agentx/config/team_loader/index


Classes
-------

.. autoapisummary::

   agentx.config.PromptLoader


Functions
---------

.. autoapisummary::

   agentx.config.create_single_agent_template
   agentx.config.create_team_config_template
   agentx.config.load_agents_config
   agentx.config.load_single_agent_config
   agentx.config.load_team_config
   agentx.config.validate_config_file


Package Contents
----------------

.. py:class:: PromptLoader(prompts_dir: str)

   Loads and processes prompt templates from markdown files.
   Supports Jinja2 templating with {{ variable_name }} syntax.

   Initialize the prompt loader.

   :param prompts_dir: Directory containing prompt markdown files


   .. py:method:: clear_cache() -> None

      Clear the prompt cache.



   .. py:method:: get_template_variables(prompt_file: str) -> list[str]

      Extract template variables from a prompt file.

      :param prompt_file: Name of the prompt file

      :returns: List of variable names found in the template



   .. py:method:: list_available_prompts() -> list[str]

      List all available prompt files in the prompts directory.

      :returns: List of prompt file names



   .. py:method:: load_prompt(prompt_file: str, variables: Optional[Dict[str, Any]] = None) -> str

      Load a prompt from a markdown file with Jinja2 variable substitution.

      :param prompt_file: Name of the prompt file (e.g., "writer_agent.md")
      :param variables: Dictionary of variables for substitution

      :returns: Processed prompt text with variables substituted

      :raises ConfigurationError: If prompt file not found or rendering fails



   .. py:method:: render_prompt_with_fallbacks(prompt_file: str, variables: Dict[str, Any], fallback_values: Optional[Dict[str, Any]] = None) -> str

      Render a prompt with fallback values for missing variables.

      :param prompt_file: Name of the prompt file
      :param variables: Primary variables dictionary
      :param fallback_values: Fallback values for missing variables

      :returns: Rendered prompt text



   .. py:method:: validate_template(prompt_file: str, variables: Dict[str, Any]) -> bool

      Validate that a template can be rendered with given variables.

      :param prompt_file: Name of the prompt file
      :param variables: Variables to test with

      :returns: True if template renders successfully

      :raises ConfigurationError: If template validation fails



   .. py:attribute:: jinja_env


   .. py:attribute:: prompts_dir


.. py:function:: create_single_agent_template(agent_name: str, output_path: str, include_suggestions: bool = True) -> str

   Create a YAML config template for a single agent.

   :param agent_name: Name of the agent
   :param output_path: Where to save the template
   :param include_suggestions: Whether to include suggested tools

   :returns: Path to created template file


.. py:function:: create_team_config_template(team_name: str, agent_names: List[str], output_path: str, include_suggestions: bool = True) -> str

   Create a YAML config template for a team with multiple agents.

   :param team_name: Name of the team
   :param agent_names: List of agent names to include
   :param output_path: Where to save the template
   :param include_suggestions: Whether to include suggested tools

   :returns: Path to created template file


.. py:function:: load_agents_config(config_path: str, model_override: Optional[str] = None) -> List[agentx.core.config.AgentConfig]

   Load agent configurations from a YAML file, handling presets.

   :param config_path: Path to the main team config YAML file.
   :param model_override: Optional model name to override for all agents.

   :returns: A list of agent configuration dictionaries.


.. py:function:: load_single_agent_config(config_path: str, agent_name: Optional[str] = None, validate_tools: bool = True) -> tuple[agentx.core.config.AgentConfig, List[str]]

   Load a single agent configuration from YAML file.

   :param config_path: Path to YAML config file
   :param agent_name: Specific agent name to load (if file contains multiple agents)
   :param validate_tools: Whether to validate tool names against registry

   :returns: Tuple of (AgentConfig, tools)

   :raises ConfigurationError: If config is invalid or agent not found


.. py:function:: load_team_config(config_path: str) -> agentx.core.config.TeamConfig

   Loads a team configuration from a given path.


.. py:function:: validate_config_file(config_path: str) -> Dict[str, Any]

   Validate a config file (single agent or team) and return validation results.

   :param config_path: Path to config file

   :returns: Dictionary with validation results


