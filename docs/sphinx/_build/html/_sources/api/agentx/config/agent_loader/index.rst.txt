agentx.config.agent_loader
==========================

.. py:module:: agentx.config.agent_loader

.. autoapi-nested-parse::

   Agent configuration loading with tool validation and discovery.



Attributes
----------

.. autoapisummary::

   agentx.config.agent_loader.logger


Functions
---------

.. autoapisummary::

   agentx.config.agent_loader.create_single_agent_template
   agentx.config.agent_loader.create_team_config_template
   agentx.config.agent_loader.load_agents_config
   agentx.config.agent_loader.load_single_agent_config
   agentx.config.agent_loader.validate_config_file


Module Contents
---------------

.. py:function:: create_single_agent_template(agent_name: str, output_path: str, include_suggestions: bool = True) -> str

   Create a YAML config template for a single agent.

   :param agent_name: Name of the agent
   :param output_path: Where to save the template
   :param include_suggestions: Whether to include suggested tools

   :returns: Path to created template file


.. py:function:: create_team_config_template(team_name: str, agent_names: List[str], output_path: str, include_suggestions: bool = True) -> str

   Create a YAML config template for a team with multiple agents.

   :param team_name: Name of the team
   :param agent_names: List of agent names to include
   :param output_path: Where to save the template
   :param include_suggestions: Whether to include suggested tools

   :returns: Path to created template file


.. py:function:: load_agents_config(config_path: str, model_override: Optional[str] = None) -> List[agentx.core.config.AgentConfig]

   Load agent configurations from a YAML file, handling presets.

   :param config_path: Path to the main team config YAML file.
   :param model_override: Optional model name to override for all agents.

   :returns: A list of agent configuration dictionaries.


.. py:function:: load_single_agent_config(config_path: str, agent_name: Optional[str] = None, validate_tools: bool = True) -> tuple[agentx.core.config.AgentConfig, List[str]]

   Load a single agent configuration from YAML file.

   :param config_path: Path to YAML config file
   :param agent_name: Specific agent name to load (if file contains multiple agents)
   :param validate_tools: Whether to validate tool names against registry

   :returns: Tuple of (AgentConfig, tools)

   :raises ConfigurationError: If config is invalid or agent not found


.. py:function:: validate_config_file(config_path: str) -> Dict[str, Any]

   Validate a config file (single agent or team) and return validation results.

   :param config_path: Path to config file

   :returns: Dictionary with validation results


.. py:data:: logger

