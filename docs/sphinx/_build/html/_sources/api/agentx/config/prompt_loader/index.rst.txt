agentx.config.prompt_loader
===========================

.. py:module:: agentx.config.prompt_loader

.. autoapi-nested-parse::

   Prompt loading and templating system for AgentX.
   Handles loading prompts from markdown files with Jinja2 variable substitution.



Attributes
----------

.. autoapisummary::

   agentx.config.prompt_loader.logger


Classes
-------

.. autoapisummary::

   agentx.config.prompt_loader.PromptLoader


Functions
---------

.. autoapisummary::

   agentx.config.prompt_loader.create_prompt_loader


Module Contents
---------------

.. py:class:: PromptLoader(prompts_dir: str)

   Loads and processes prompt templates from markdown files.
   Supports Jinja2 templating with {{ variable_name }} syntax.

   Initialize the prompt loader.

   :param prompts_dir: Directory containing prompt markdown files


   .. py:method:: clear_cache() -> None

      Clear the prompt cache.



   .. py:method:: get_template_variables(prompt_file: str) -> list[str]

      Extract template variables from a prompt file.

      :param prompt_file: Name of the prompt file

      :returns: List of variable names found in the template



   .. py:method:: list_available_prompts() -> list[str]

      List all available prompt files in the prompts directory.

      :returns: List of prompt file names



   .. py:method:: load_prompt(prompt_file: str, variables: Optional[Dict[str, Any]] = None) -> str

      Load a prompt from a markdown file with Jinja2 variable substitution.

      :param prompt_file: Name of the prompt file (e.g., "writer_agent.md")
      :param variables: Dictionary of variables for substitution

      :returns: Processed prompt text with variables substituted

      :raises ConfigurationError: If prompt file not found or rendering fails



   .. py:method:: render_prompt_with_fallbacks(prompt_file: str, variables: Dict[str, Any], fallback_values: Optional[Dict[str, Any]] = None) -> str

      Render a prompt with fallback values for missing variables.

      :param prompt_file: Name of the prompt file
      :param variables: Primary variables dictionary
      :param fallback_values: Fallback values for missing variables

      :returns: Rendered prompt text



   .. py:method:: validate_template(prompt_file: str, variables: Dict[str, Any]) -> bool

      Validate that a template can be rendered with given variables.

      :param prompt_file: Name of the prompt file
      :param variables: Variables to test with

      :returns: True if template renders successfully

      :raises ConfigurationError: If template validation fails



   .. py:attribute:: jinja_env


   .. py:attribute:: prompts_dir


.. py:function:: create_prompt_loader(config_dir: str) -> PromptLoader

   Factory function to create a PromptLoader instance.

   :param config_dir: Configuration directory containing prompts/ subdirectory

   :returns: PromptLoader instance


.. py:data:: logger

