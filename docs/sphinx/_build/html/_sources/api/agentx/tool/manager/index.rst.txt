agentx.tool.manager
===================

.. py:module:: agentx.tool.manager

.. autoapi-nested-parse::

   Tool Manager - Unified tool registry and execution for task isolation.

   Combines ToolRegistry and ToolExecutor into a single manager class
   that provides both tool registration and execution capabilities.
   This simplifies the Agent interface and ensures task-level tool isolation.



Attributes
----------

.. autoapisummary::

   agentx.tool.manager.logger


Classes
-------

.. autoapisummary::

   agentx.tool.manager.ToolManager


Module Contents
---------------

.. py:class:: ToolManager(task_id: str = 'default')

   Unified tool manager that combines registry and execution.

   This class provides task-level tool isolation by maintaining
   its own registry and executor. Each task gets its own ToolManager
   instance to prevent tool conflicts between tasks.

   Initialize tool manager with task isolation.

   :param task_id: Unique identifier for this task (for logging/debugging)


   .. py:method:: __repr__() -> str


   .. py:method:: __str__() -> str


   .. py:method:: clear_tools() -> None

      Clear all registered tools (useful for testing).



   .. py:method:: execute_tool(tool_name: str, agent_name: str = 'default', **kwargs) -> agentx.tool.executor.ToolResult
      :async:


      Execute a single tool.



   .. py:method:: execute_tools(tool_calls: List[Any], agent_name: str = 'default') -> List[Dict[str, Any]]
      :async:


      Execute multiple tool calls.



   .. py:method:: get_builtin_tools() -> List[str]

      Get list of all builtin tool names.



   .. py:method:: get_custom_tools() -> List[str]

      Get list of all custom (non-builtin) tool names.



   .. py:method:: get_execution_stats() -> Dict[str, Any]

      Get execution statistics.



   .. py:method:: get_tool(name: str)

      Get a tool instance by name for direct access.



   .. py:method:: get_tool_count() -> int

      Get the number of registered tools.



   .. py:method:: get_tool_function(name: str)

      Get a tool function by name.



   .. py:method:: get_tool_schemas(tool_names: List[str] = None) -> List[Dict[str, Any]]

      Get JSON schemas for tools.



   .. py:method:: list_tools() -> List[str]

      Get list of all registered tool names.



   .. py:method:: register_tool(tool: agentx.tool.models.Tool) -> None

      Register a tool with this task's registry.



   .. py:attribute:: executor


   .. py:attribute:: registry


   .. py:attribute:: task_id
      :value: 'default'



.. py:data:: logger

