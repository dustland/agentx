agentx.server
=============

.. py:module:: agentx.server

.. autoapi-nested-parse::

   AgentX Server

   Simple REST API for task execution and memory management.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /api/agentx/server/api/index
   /api/agentx/server/models/index


Classes
-------

.. autoapisummary::

   agentx.server.HealthResponse
   agentx.server.MemoryRequest
   agentx.server.MemoryResponse
   agentx.server.TaskInfo
   agentx.server.TaskRequest
   agentx.server.TaskResponse
   agentx.server.TaskStatus


Functions
---------

.. autoapisummary::

   agentx.server.create_app
   agentx.server.run_server


Package Contents
----------------

.. py:class:: HealthResponse(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Health check response

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: active_tasks
      :type:  int
      :value: 0



   .. py:attribute:: status
      :type:  str
      :value: 'healthy'



   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: version
      :type:  str
      :value: '0.4.0'



.. py:class:: MemoryRequest(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Request for memory operations

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: content
      :type:  Optional[str]
      :value: None



   .. py:attribute:: query
      :type:  Optional[str]
      :value: None



   .. py:attribute:: task_id
      :type:  str


.. py:class:: MemoryResponse(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Response from memory operations

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: data
      :type:  Optional[Any]
      :value: None



   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: success
      :type:  bool


   .. py:attribute:: task_id
      :type:  str


.. py:class:: TaskInfo(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Information about a task

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: completed_at
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: config_path
      :type:  str


   .. py:attribute:: context
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: created_at
      :type:  datetime.datetime


   .. py:attribute:: status
      :type:  TaskStatus


   .. py:attribute:: task_description
      :type:  str


   .. py:attribute:: task_id
      :type:  str


.. py:class:: TaskRequest(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Request to create and run a task

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: config_path
      :type:  str
      :value: None



   .. py:attribute:: context
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: task_description
      :type:  str
      :value: None



.. py:class:: TaskResponse(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Response from task operations

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: completed_at
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: created_at
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: result
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: status
      :type:  TaskStatus


   .. py:attribute:: task_id
      :type:  str


.. py:class:: TaskStatus

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Task status enumeration

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: COMPLETED
      :value: 'completed'



   .. py:attribute:: FAILED
      :value: 'failed'



   .. py:attribute:: PENDING
      :value: 'pending'



   .. py:attribute:: RUNNING
      :value: 'running'



.. py:function:: create_app(title: str = 'AgentX API', description: str = 'REST API for AgentX task execution and memory management', version: str = '0.4.0', enable_cors: bool = True) -> fastapi.FastAPI

   Create and configure the FastAPI application.

   :param title: API title
   :param description: API description
   :param version: API version
   :param enable_cors: Whether to enable CORS middleware

   :returns: Configured FastAPI application


.. py:function:: run_server(host: str = '0.0.0.0', port: int = 8000, reload: bool = False, log_level: str = 'info')

   Run the AgentX server with integrated observability.

   :param host: Host to bind to
   :param port: Port to bind to
   :param reload: Enable auto-reload for development
   :param log_level: Logging level


