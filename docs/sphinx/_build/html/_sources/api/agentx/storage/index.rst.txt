agentx.storage
==============

.. py:module:: agentx.storage

.. autoapi-nested-parse::

   AgentX Storage - Clean persistence abstractions for the framework.

   Provides storage backends and interfaces that can be used directly by the framework
   and wrapped as tools for LLM agents.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /api/agentx/storage/backends/index
   /api/agentx/storage/factory/index
   /api/agentx/storage/git_storage/index
   /api/agentx/storage/interfaces/index
   /api/agentx/storage/models/index
   /api/agentx/storage/workspace/index


Classes
-------

.. autoapisummary::

   agentx.storage.ArtifactStorage
   agentx.storage.FileStorage
   agentx.storage.GitArtifactStorage
   agentx.storage.LocalFileStorage
   agentx.storage.StorageBackend
   agentx.storage.StorageFactory
   agentx.storage.StorageResult
   agentx.storage.WorkspaceStorage


Package Contents
----------------

.. py:class:: ArtifactStorage

   Bases: :py:obj:`StorageBackend`


   Interface for artifact storage with versioning and metadata.


   .. py:method:: delete_artifact(name: str, version: Optional[str] = None) -> StorageResult
      :abstractmethod:

      :async:


      Delete an artifact or specific version.



   .. py:method:: get_artifact(name: str, version: Optional[str] = None) -> Optional[str]
      :abstractmethod:

      :async:


      Get artifact content by name and optional version.



   .. py:method:: get_artifact_versions(name: str) -> List[str]
      :abstractmethod:

      :async:


      Get all versions of an artifact.



   .. py:method:: list_artifacts() -> List[Dict[str, Any]]
      :abstractmethod:

      :async:


      List all artifacts with their metadata.



   .. py:method:: store_artifact(name: str, content: Union[str, bytes], content_type: str = 'text/plain', metadata: Optional[Dict[str, Any]] = None) -> StorageResult
      :abstractmethod:

      :async:


      Store an artifact with versioning.



.. py:class:: FileStorage

   Bases: :py:obj:`StorageBackend`


   Interface for file storage operations.


   .. py:method:: append_text(path: str, content: str, encoding: str = 'utf-8') -> StorageResult
      :abstractmethod:

      :async:


      Append text content to a file.



   .. py:method:: create_directory(path: str) -> StorageResult
      :abstractmethod:

      :async:


      Create a directory.



   .. py:method:: delete(path: str) -> StorageResult
      :abstractmethod:

      :async:


      Delete a file.



   .. py:method:: read_bytes(path: str) -> bytes
      :abstractmethod:

      :async:


      Read binary content from a file.



   .. py:method:: read_text(path: str, encoding: str = 'utf-8') -> str
      :abstractmethod:

      :async:


      Read text content from a file.



   .. py:method:: write_bytes(path: str, content: bytes) -> StorageResult
      :abstractmethod:

      :async:


      Write binary content to a file.



   .. py:method:: write_text(path: str, content: str, encoding: str = 'utf-8') -> StorageResult
      :abstractmethod:

      :async:


      Write text content to a file.



.. py:class:: GitArtifactStorage(workspace_path: Union[str, pathlib.Path] = None, base_path: Union[str, pathlib.Path] = None, task_id: str = None)

   Git-based artifact storage with proper version control.

   Uses Git for versioning artifacts, providing:
   - Proper diffs and history
   - Branching and merging capabilities
   - Standard Git tooling integration
   - Efficient storage with delta compression
   - Meaningful commit messages


   .. py:method:: __del__()

      Cleanup thread pool.



   .. py:method:: create_directory(path: str) -> Any
      :async:


      Create directory (no-op for git storage).



   .. py:method:: delete_artifact(name: str, version: Optional[str] = None) -> agentx.storage.interfaces.StorageResult
      :async:


      Delete an artifact or specific version.



   .. py:method:: exists(path: str) -> bool
      :async:


      Check if artifact exists.



   .. py:method:: get_artifact(name: str, version: Optional[str] = None) -> Optional[str]
      :async:


      Get artifact content at specific version (commit).



   .. py:method:: get_artifact_diff(name: str, version1: str, version2: str) -> Optional[str]
      :async:


      Get diff between two versions of an artifact.



   .. py:method:: get_artifact_versions(name: str) -> List[str]
      :async:


      Get all versions (commits) of an artifact.



   .. py:method:: list_artifacts() -> List[Dict[str, Any]]
      :async:


      List all artifacts with their Git history.



   .. py:method:: list_directory(path: str = '') -> List[Any]
      :async:


      List directory contents (returns artifacts for compatibility).



   .. py:method:: read_text(path: str) -> str
      :async:


      Read text content (alias for get_artifact).



   .. py:method:: store_artifact(name: str, content: Union[str, bytes], content_type: str = 'text/plain', metadata: Optional[Dict[str, Any]] = None, commit_message: Optional[str] = None) -> agentx.storage.interfaces.StorageResult
      :async:


      Store an artifact with Git versioning.



   .. py:method:: write_bytes(path: str, content: bytes) -> Any
      :async:


      Write bytes content (alias for store_artifact).



   .. py:method:: write_text(path: str, content: str) -> Any
      :async:


      Write text content (alias for store_artifact).



   .. py:attribute:: artifacts_path


   .. py:attribute:: executor


   .. py:attribute:: repo


.. py:class:: LocalFileStorage(base_path: Union[str, pathlib.Path])

   Bases: :py:obj:`agentx.storage.interfaces.FileStorage`


   Local filesystem storage backend with security constraints.


   .. py:method:: append_text(path: str, content: str, encoding: str = 'utf-8') -> agentx.storage.interfaces.StorageResult
      :async:


      Append text content to a file.



   .. py:method:: create_directory(path: str) -> agentx.storage.interfaces.StorageResult
      :async:


      Create a directory.



   .. py:method:: delete(path: str) -> agentx.storage.interfaces.StorageResult
      :async:


      Delete a file.



   .. py:method:: exists(path: str) -> bool
      :async:


      Check if a path exists.



   .. py:method:: get_info(path: str) -> Optional[agentx.storage.interfaces.FileInfo]
      :async:


      Get information about a file/directory.



   .. py:method:: list_directory(path: str = '.') -> List[agentx.storage.interfaces.FileInfo]
      :async:


      List contents of a directory.



   .. py:method:: read_bytes(path: str) -> bytes
      :async:


      Read binary content from a file.



   .. py:method:: read_text(path: str, encoding: str = 'utf-8') -> str
      :async:


      Read text content from a file.



   .. py:method:: write_bytes(path: str, content: bytes) -> agentx.storage.interfaces.StorageResult
      :async:


      Write binary content to a file.



   .. py:method:: write_text(path: str, content: str, encoding: str = 'utf-8') -> agentx.storage.interfaces.StorageResult
      :async:


      Write text content to a file.



   .. py:attribute:: base_path


.. py:class:: StorageBackend

   Bases: :py:obj:`abc.ABC`


   Base interface for all storage backends.


   .. py:method:: exists(path: str) -> bool
      :abstractmethod:

      :async:


      Check if a path exists.



   .. py:method:: get_info(path: str) -> Optional[FileInfo]
      :abstractmethod:

      :async:


      Get information about a file/directory.



   .. py:method:: list_directory(path: str = '.') -> List[FileInfo]
      :abstractmethod:

      :async:


      List contents of a directory.



.. py:class:: StorageFactory

   Factory for creating storage providers.

   Creates filesystem abstractions that can be swapped for different backends
   (local, S3, Azure, etc.) and workspace storage for business logic.


   .. py:method:: create_file_storage(base_path: Union[str, pathlib.Path]) -> agentx.storage.interfaces.FileStorage
      :staticmethod:


      Create a filesystem abstraction.

      This can be swapped for different backends like S3FileStorage,
      AzureFileStorage, etc. without changing the business logic.

      :param base_path: Base path for the filesystem

      :returns: FileStorage implementation



   .. py:method:: create_workspace_storage(workspace_path: Union[str, pathlib.Path], use_git_artifacts: bool = True) -> agentx.storage.workspace.WorkspaceStorage
      :staticmethod:


      Create a workspace storage for business logic.

      Handles business concepts like artifacts, messages, execution plans
      using the filesystem abstraction underneath.

      :param workspace_path: Path to the workspace directory
      :param use_git_artifacts: Whether to use Git for artifact versioning

      :returns: WorkspaceStorage instance



.. py:class:: StorageResult

   Result of a storage operation.


   .. py:method:: __post_init__()


   .. py:attribute:: data
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: path
      :type:  Optional[str]
      :value: None



   .. py:attribute:: size
      :type:  Optional[int]
      :value: None



   .. py:attribute:: success
      :type:  bool


.. py:class:: WorkspaceStorage(workspace_path: Union[str, pathlib.Path] = None, file_storage: agentx.storage.interfaces.FileStorage = None, use_git_artifacts: bool = True, base_path: Union[str, pathlib.Path] = None, task_id: str = None)

   Workspace storage that handles business concepts.

   Manages execution plans, messages, artifacts, and other workspace
   content using a filesystem abstraction underneath.


   .. py:method:: delete_artifact(name: str, version: Optional[str] = None) -> agentx.storage.interfaces.StorageResult
      :async:


      Delete an artifact or specific version.



   .. py:method:: get_artifact(name: str, version: Optional[str] = None) -> Optional[str]
      :async:


      Get artifact content.



   .. py:method:: get_artifact_diff(name: str, version1: str, version2: str) -> Optional[str]
      :async:


      Get diff between two versions of an artifact (Git only).



   .. py:method:: get_artifact_versions(name: str) -> List[str]
      :async:


      Get all versions of an artifact.



   .. py:method:: get_conversation_history(conversation_id: str = 'default') -> List[Dict[str, Any]]
      :async:


      Get conversation history.



   .. py:method:: get_execution_plan(plan_id: str) -> Optional[Dict[str, Any]]
      :async:


      Get an execution plan.



   .. py:method:: get_workspace_path() -> pathlib.Path

      Get the workspace path.



   .. py:method:: get_workspace_summary() -> Dict[str, Any]
      :async:


      Get a summary of workspace contents.



   .. py:method:: list_artifacts() -> List[Dict[str, Any]]
      :async:


      List all artifacts.



   .. py:method:: list_directory(path: str = '') -> Dict[str, Any]
      :async:


      List contents of a directory in the workspace.



   .. py:method:: store_artifact(name: str, content: Union[str, bytes], content_type: str = 'text/plain', metadata: Optional[Dict[str, Any]] = None, commit_message: Optional[str] = None) -> agentx.storage.interfaces.StorageResult
      :async:


      Store an artifact with versioning.



   .. py:method:: store_execution_plan(plan: Dict[str, Any], plan_id: Optional[str] = None) -> agentx.storage.interfaces.StorageResult
      :async:


      Store an execution plan.



   .. py:method:: store_message(message: Dict[str, Any], conversation_id: str = 'default') -> agentx.storage.interfaces.StorageResult
      :async:


      Store a conversation message.



   .. py:attribute:: file_storage
      :value: None



   .. py:attribute:: use_git_artifacts
      :value: True



