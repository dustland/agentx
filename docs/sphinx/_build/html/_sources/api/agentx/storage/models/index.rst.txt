agentx.storage.models
=====================

.. py:module:: agentx.storage.models

.. autoapi-nested-parse::

   Storage subsystem models - Self-contained data models for storage management.

   This module contains all data models related to storage management, following the
   architectural rule that subsystems should be self-contained and not import from core.



Classes
-------

.. autoapisummary::

   agentx.storage.models.Artifact
   agentx.storage.models.ArtifactContent
   agentx.storage.models.ArtifactType
   agentx.storage.models.BranchInfo
   agentx.storage.models.CommitInfo
   agentx.storage.models.DirectoryListing
   agentx.storage.models.FileChange
   agentx.storage.models.FileInfo
   agentx.storage.models.FileStatus
   agentx.storage.models.SearchQuery
   agentx.storage.models.SearchResult
   agentx.storage.models.StorageBackend
   agentx.storage.models.StorageBackendType
   agentx.storage.models.StorageConfig
   agentx.storage.models.StorageHealth
   agentx.storage.models.StorageOperation
   agentx.storage.models.StorageOperation
   agentx.storage.models.StorageOperationResult
   agentx.storage.models.StorageStats
   agentx.storage.models.WorkspaceConfig
   agentx.storage.models.WorkspaceState


Functions
---------

.. autoapisummary::

   agentx.storage.models.calculate_checksum
   agentx.storage.models.create_artifact
   agentx.storage.models.format_file_size
   agentx.storage.models.generate_short_id
   agentx.storage.models.get_mime_type


Module Contents
---------------

.. py:class:: Artifact(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Represents a stored artifact.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:method:: to_dict() -> Dict[str, Any]

      Convert to dictionary for serialization.



   .. py:attribute:: agent_name
      :type:  Optional[str]
      :value: None



   .. py:attribute:: artifact_id
      :type:  str
      :value: None



   .. py:attribute:: artifact_type
      :type:  ArtifactType


   .. py:attribute:: checksum
      :type:  Optional[str]
      :value: None



   .. py:attribute:: created_at
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: created_by
      :type:  Optional[str]
      :value: None



   .. py:attribute:: encoding
      :type:  Optional[str]
      :value: None



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: mime_type
      :type:  Optional[str]
      :value: None



   .. py:attribute:: name
      :type:  str


   .. py:attribute:: path
      :type:  str


   .. py:attribute:: size_bytes
      :type:  int
      :value: 0



   .. py:attribute:: tags
      :type:  List[str]
      :value: None



   .. py:attribute:: task_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: tool_name
      :type:  Optional[str]
      :value: None



   .. py:attribute:: updated_at
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: version
      :type:  int
      :value: 1



.. py:class:: ArtifactContent(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Content of an artifact.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:method:: get_binary_content() -> bytes

      Get content as bytes.



   .. py:method:: get_text_content() -> str

      Get content as text.



   .. py:attribute:: artifact_id
      :type:  str


   .. py:attribute:: content
      :type:  Union[str, bytes]


   .. py:attribute:: content_type
      :type:  str


   .. py:attribute:: encoding
      :type:  Optional[str]
      :value: None



.. py:class:: ArtifactType

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Types of artifacts that can be stored.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: BINARY
      :value: 'binary'



   .. py:attribute:: CODE
      :value: 'code'



   .. py:attribute:: CONFIG
      :value: 'config'



   .. py:attribute:: DATA
      :value: 'data'



   .. py:attribute:: DOCUMENT
      :value: 'document'



   .. py:attribute:: IMAGE
      :value: 'image'



   .. py:attribute:: JSON
      :value: 'json'



   .. py:attribute:: LOG
      :value: 'log'



   .. py:attribute:: REPORT
      :value: 'report'



   .. py:attribute:: TEXT
      :value: 'text'



.. py:class:: BranchInfo(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Information about a branch.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: ahead_count
      :type:  int
      :value: 0



   .. py:attribute:: behind_count
      :type:  int
      :value: 0



   .. py:attribute:: commit_id
      :type:  str


   .. py:attribute:: created_at
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: created_by
      :type:  Optional[str]
      :value: None



   .. py:attribute:: is_current
      :type:  bool
      :value: False



   .. py:attribute:: is_default
      :type:  bool
      :value: False



   .. py:attribute:: last_commit_at
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: name
      :type:  str


   .. py:attribute:: upstream_branch
      :type:  Optional[str]
      :value: None



.. py:class:: CommitInfo(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Information about a commit.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: added_files
      :type:  List[str]
      :value: None



   .. py:attribute:: author
      :type:  str


   .. py:attribute:: branch
      :type:  Optional[str]
      :value: None



   .. py:attribute:: commit_id
      :type:  str


   .. py:attribute:: deleted_files
      :type:  List[str]
      :value: None



   .. py:attribute:: message
      :type:  str


   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: modified_files
      :type:  List[str]
      :value: None



   .. py:attribute:: parent_commits
      :type:  List[str]
      :value: None



   .. py:attribute:: tags
      :type:  List[str]
      :value: None



   .. py:attribute:: timestamp
      :type:  datetime.datetime


.. py:class:: DirectoryListing(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Listing of directory contents.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:method:: get_all_items() -> List[FileInfo]

      Get all files and directories combined.



   .. py:attribute:: directories
      :type:  List[FileInfo]


   .. py:attribute:: directory_count
      :type:  int
      :value: 0



   .. py:attribute:: file_count
      :type:  int
      :value: 0



   .. py:attribute:: files
      :type:  List[FileInfo]


   .. py:attribute:: path
      :type:  str


   .. py:attribute:: total_size_bytes
      :type:  int
      :value: 0



.. py:class:: FileChange(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Represents a change to a file.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  Optional[str]
      :value: None



   .. py:attribute:: change_reason
      :type:  Optional[str]
      :value: None



   .. py:attribute:: lines_added
      :type:  int
      :value: 0



   .. py:attribute:: lines_removed
      :type:  int
      :value: 0



   .. py:attribute:: old_path
      :type:  Optional[str]
      :value: None



   .. py:attribute:: path
      :type:  str


   .. py:attribute:: size_change
      :type:  int
      :value: 0



   .. py:attribute:: status
      :type:  FileStatus


   .. py:attribute:: tool_name
      :type:  Optional[str]
      :value: None



.. py:class:: FileInfo(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Information about a file in storage.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: accessed_at
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: artifact_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: artifact_type
      :type:  Optional[ArtifactType]
      :value: None



   .. py:attribute:: checksum
      :type:  Optional[str]
      :value: None



   .. py:attribute:: created_at
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: encoding
      :type:  Optional[str]
      :value: None



   .. py:attribute:: is_directory
      :type:  bool
      :value: False



   .. py:attribute:: line_count
      :type:  Optional[int]
      :value: None



   .. py:attribute:: mime_type
      :type:  Optional[str]
      :value: None



   .. py:attribute:: modified_at
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: name
      :type:  str


   .. py:attribute:: path
      :type:  str


   .. py:attribute:: permissions
      :type:  Optional[str]
      :value: None



   .. py:attribute:: size_bytes
      :type:  int


.. py:class:: FileStatus

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   File status in storage.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: CONFLICT
      :value: 'conflict'



   .. py:attribute:: CREATED
      :value: 'created'



   .. py:attribute:: DELETED
      :value: 'deleted'



   .. py:attribute:: MODIFIED
      :value: 'modified'



   .. py:attribute:: UNCHANGED
      :value: 'unchanged'



.. py:class:: SearchQuery(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Query for searching artifacts.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  Optional[str]
      :value: None



   .. py:attribute:: artifact_types
      :type:  Optional[List[ArtifactType]]
      :value: None



   .. py:attribute:: created_after
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: created_before
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: created_by
      :type:  Optional[str]
      :value: None



   .. py:attribute:: include_content
      :type:  bool
      :value: False



   .. py:attribute:: limit
      :type:  int
      :value: 100



   .. py:attribute:: offset
      :type:  int
      :value: 0



   .. py:attribute:: path_pattern
      :type:  Optional[str]
      :value: None



   .. py:attribute:: query
      :type:  str


   .. py:attribute:: size_max
      :type:  Optional[int]
      :value: None



   .. py:attribute:: size_min
      :type:  Optional[int]
      :value: None



   .. py:attribute:: tags
      :type:  Optional[List[str]]
      :value: None



   .. py:attribute:: task_id
      :type:  Optional[str]
      :value: None



.. py:class:: SearchResult(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Result from artifact search.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: artifacts
      :type:  List[Artifact]


   .. py:attribute:: filters_applied
      :type:  List[str]
      :value: None



   .. py:attribute:: has_more
      :type:  bool
      :value: False



   .. py:attribute:: query
      :type:  str


   .. py:attribute:: query_time_ms
      :type:  float


   .. py:attribute:: search_metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: total_count
      :type:  int


.. py:class:: StorageBackend

   Bases: :py:obj:`abc.ABC`


   Abstract interface for storage backend implementations.


   .. py:method:: copy(source_path: str, dest_path: str) -> bool
      :abstractmethod:

      :async:


      Copy artifact from source to destination.



   .. py:method:: delete(path: str) -> bool
      :abstractmethod:

      :async:


      Delete content at the specified path.



   .. py:method:: exists(path: str) -> bool
      :abstractmethod:

      :async:


      Check if artifact exists at path.



   .. py:method:: get_artifact(artifact_id: str) -> Optional[Artifact]
      :abstractmethod:

      :async:


      Get artifact metadata by ID.



   .. py:method:: get_stats() -> StorageStats
      :abstractmethod:

      :async:


      Get storage backend statistics.



   .. py:method:: health() -> Dict[str, Any]
      :abstractmethod:

      :async:


      Get storage backend health information.



   .. py:method:: list_artifacts(prefix: str = '', artifact_type: Optional[ArtifactType] = None, limit: int = 100) -> List[Artifact]
      :abstractmethod:

      :async:


      List artifacts with optional filtering.



   .. py:method:: move(source_path: str, dest_path: str) -> bool
      :abstractmethod:

      :async:


      Move artifact from source to destination.



   .. py:method:: retrieve(path: str) -> Optional[ArtifactContent]
      :abstractmethod:

      :async:


      Retrieve content from the specified path.



   .. py:method:: store(path: str, content: Union[str, bytes], artifact_type: ArtifactType = ArtifactType.TEXT, metadata: Dict[str, Any] = None) -> Artifact
      :abstractmethod:

      :async:


      Store content at the specified path.



   .. py:method:: update_metadata(artifact_id: str, metadata: Dict[str, Any]) -> bool
      :abstractmethod:

      :async:


      Update artifact metadata.



.. py:class:: StorageBackendType

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Types of storage backends.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: AZURE_BLOB
      :value: 'azure_blob'



   .. py:attribute:: GCS
      :value: 'gcs'



   .. py:attribute:: GIT
      :value: 'git'



   .. py:attribute:: LOCAL
      :value: 'local'



   .. py:attribute:: MEMORY
      :value: 'memory'



   .. py:attribute:: S3
      :value: 's3'



.. py:class:: StorageConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Configuration for storage system.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: allowed_extensions
      :type:  Optional[List[str]]
      :value: None



   .. py:attribute:: backend
      :type:  StorageBackendType


   .. py:attribute:: backup_enabled
      :type:  bool
      :value: False



   .. py:attribute:: backup_interval_hours
      :type:  int
      :value: 24



   .. py:attribute:: backup_retention_days
      :type:  int
      :value: 30



   .. py:attribute:: blocked_extensions
      :type:  List[str]
      :value: None



   .. py:attribute:: cache_enabled
      :type:  bool
      :value: True



   .. py:attribute:: cache_size_mb
      :type:  int
      :value: 100



   .. py:attribute:: compression_enabled
      :type:  bool
      :value: False



   .. py:attribute:: config
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: encryption_enabled
      :type:  bool
      :value: False



   .. py:attribute:: encryption_key
      :type:  Optional[str]
      :value: None



   .. py:attribute:: health_check_interval_seconds
      :type:  int
      :value: 300



   .. py:attribute:: max_file_size_mb
      :type:  int
      :value: 100



   .. py:attribute:: metrics_enabled
      :type:  bool
      :value: True



   .. py:attribute:: workspace_path
      :type:  str
      :value: './workspace'



.. py:class:: StorageHealth(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Storage backend health status.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: available_space_gb
      :type:  Optional[float]
      :value: None



   .. py:attribute:: backend_type
      :type:  str


   .. py:attribute:: connection_status
      :type:  bool
      :value: True



   .. py:attribute:: disk_usage_percent
      :type:  Optional[float]
      :value: None



   .. py:attribute:: error_rate
      :type:  float
      :value: 0.0



   .. py:attribute:: errors
      :type:  List[str]
      :value: None



   .. py:attribute:: last_check
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: last_successful_operation
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: response_time_ms
      :type:  float
      :value: 0.0



   .. py:attribute:: status
      :type:  str


   .. py:attribute:: uptime_seconds
      :type:  float
      :value: 0.0



   .. py:attribute:: warnings
      :type:  List[str]
      :value: None



.. py:class:: StorageOperation

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Types of storage operations.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: COPY
      :value: 'copy'



   .. py:attribute:: CREATE
      :value: 'create'



   .. py:attribute:: DELETE
      :value: 'delete'



   .. py:attribute:: LIST
      :value: 'list'



   .. py:attribute:: MOVE
      :value: 'move'



   .. py:attribute:: READ
      :value: 'read'



   .. py:attribute:: SYNC
      :value: 'sync'



   .. py:attribute:: UPDATE
      :value: 'update'



.. py:class:: StorageOperation(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Represents a storage operation.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  Optional[str]
      :value: None



   .. py:attribute:: completed_at
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: content_size
      :type:  int
      :value: 0



   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: operation_id
      :type:  str
      :value: None



   .. py:attribute:: operation_type
      :type:  StorageOperation


   .. py:attribute:: path
      :type:  str


   .. py:attribute:: source_path
      :type:  Optional[str]
      :value: None



   .. py:attribute:: started_at
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: success
      :type:  bool
      :value: False



   .. py:attribute:: task_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: tool_name
      :type:  Optional[str]
      :value: None



.. py:class:: StorageOperationResult(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Result of a storage operation.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: artifact
      :type:  Optional[Artifact]
      :value: None



   .. py:attribute:: bytes_processed
      :type:  int
      :value: 0



   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: execution_time_ms
      :type:  float
      :value: 0.0



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: operation_id
      :type:  str


   .. py:attribute:: success
      :type:  bool


.. py:class:: StorageStats(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Storage backend statistics.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: artifacts_by_type
      :type:  Dict[str, int]
      :value: None



   .. py:attribute:: available_space_bytes
      :type:  Optional[int]
      :value: None



   .. py:attribute:: avg_read_time_ms
      :type:  float
      :value: 0.0



   .. py:attribute:: avg_write_time_ms
      :type:  float
      :value: 0.0



   .. py:attribute:: backend_type
      :type:  str


   .. py:attribute:: cache_hit_rate
      :type:  float
      :value: 0.0



   .. py:attribute:: error_count
      :type:  int
      :value: 0



   .. py:attribute:: last_operation
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: operations_today
      :type:  int
      :value: 0



   .. py:attribute:: operations_total
      :type:  int
      :value: 0



   .. py:attribute:: size_by_type
      :type:  Dict[str, int]
      :value: None



   .. py:attribute:: total_artifacts
      :type:  int
      :value: 0



   .. py:attribute:: total_size_bytes
      :type:  int
      :value: 0



   .. py:attribute:: used_space_bytes
      :type:  Optional[int]
      :value: None



   .. py:attribute:: warning_count
      :type:  int
      :value: 0



.. py:class:: WorkspaceConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Configuration for a workspace.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: allowed_agents
      :type:  Optional[List[str]]
      :value: None



   .. py:attribute:: auto_commit
      :type:  bool
      :value: True



   .. py:attribute:: auto_sync
      :type:  bool
      :value: False



   .. py:attribute:: backend
      :type:  StorageBackendType


   .. py:attribute:: backend_config
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: created_at
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: created_by
      :type:  Optional[str]
      :value: None



   .. py:attribute:: description
      :type:  Optional[str]
      :value: None



   .. py:attribute:: max_size_mb
      :type:  Optional[int]
      :value: None



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: name
      :type:  str


   .. py:attribute:: path
      :type:  str


   .. py:attribute:: read_only
      :type:  bool
      :value: False



   .. py:attribute:: retention_days
      :type:  Optional[int]
      :value: None



   .. py:attribute:: workspace_id
      :type:  str
      :value: None



.. py:class:: WorkspaceState(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Current state of a workspace.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: current_branch
      :type:  Optional[str]
      :value: None



   .. py:attribute:: directory_count
      :type:  int
      :value: 0



   .. py:attribute:: errors
      :type:  List[str]
      :value: None



   .. py:attribute:: file_count
      :type:  int
      :value: 0



   .. py:attribute:: last_activity
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: last_commit
      :type:  Optional[str]
      :value: None



   .. py:attribute:: last_sync
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: status
      :type:  str
      :value: 'healthy'



   .. py:attribute:: total_artifacts
      :type:  int
      :value: 0



   .. py:attribute:: total_size_bytes
      :type:  int
      :value: 0



   .. py:attribute:: uncommitted_changes
      :type:  int
      :value: 0



   .. py:attribute:: warnings
      :type:  List[str]
      :value: None



   .. py:attribute:: workspace_id
      :type:  str


.. py:function:: calculate_checksum(content: Union[str, bytes]) -> str

   Calculate SHA-256 checksum of content.


.. py:function:: create_artifact(name: str, path: str, artifact_type: ArtifactType, content_size: int = 0, created_by: str = None, task_id: str = None, agent_name: str = None, metadata: Dict[str, Any] = None) -> Artifact

   Create a new artifact with the specified parameters.


.. py:function:: format_file_size(size_bytes: int) -> str

   Format file size in human-readable format.


.. py:function:: generate_short_id(length: int = 8) -> str

   Generate a short, URL-friendly, cryptographically secure random ID.


.. py:function:: get_mime_type(file_path: str) -> str

   Get MIME type for a file based on its extension.


