agentx.storage.interfaces
=========================

.. py:module:: agentx.storage.interfaces

.. autoapi-nested-parse::

   Storage interfaces - Clean abstractions for different types of storage operations.



Classes
-------

.. autoapisummary::

   agentx.storage.interfaces.ArtifactStorage
   agentx.storage.interfaces.FileInfo
   agentx.storage.interfaces.FileStorage
   agentx.storage.interfaces.StorageBackend
   agentx.storage.interfaces.StorageResult


Module Contents
---------------

.. py:class:: ArtifactStorage

   Bases: :py:obj:`StorageBackend`


   Interface for artifact storage with versioning and metadata.


   .. py:method:: delete_artifact(name: str, version: Optional[str] = None) -> StorageResult
      :abstractmethod:

      :async:


      Delete an artifact or specific version.



   .. py:method:: get_artifact(name: str, version: Optional[str] = None) -> Optional[str]
      :abstractmethod:

      :async:


      Get artifact content by name and optional version.



   .. py:method:: get_artifact_versions(name: str) -> List[str]
      :abstractmethod:

      :async:


      Get all versions of an artifact.



   .. py:method:: list_artifacts() -> List[Dict[str, Any]]
      :abstractmethod:

      :async:


      List all artifacts with their metadata.



   .. py:method:: store_artifact(name: str, content: Union[str, bytes], content_type: str = 'text/plain', metadata: Optional[Dict[str, Any]] = None) -> StorageResult
      :abstractmethod:

      :async:


      Store an artifact with versioning.



.. py:class:: FileInfo

   Information about a stored file.


   .. py:method:: __post_init__()


   .. py:attribute:: content_type
      :type:  Optional[str]
      :value: None



   .. py:attribute:: created_at
      :type:  datetime.datetime


   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: modified_at
      :type:  datetime.datetime


   .. py:attribute:: path
      :type:  str


   .. py:attribute:: size
      :type:  int


.. py:class:: FileStorage

   Bases: :py:obj:`StorageBackend`


   Interface for file storage operations.


   .. py:method:: append_text(path: str, content: str, encoding: str = 'utf-8') -> StorageResult
      :abstractmethod:

      :async:


      Append text content to a file.



   .. py:method:: create_directory(path: str) -> StorageResult
      :abstractmethod:

      :async:


      Create a directory.



   .. py:method:: delete(path: str) -> StorageResult
      :abstractmethod:

      :async:


      Delete a file.



   .. py:method:: read_bytes(path: str) -> bytes
      :abstractmethod:

      :async:


      Read binary content from a file.



   .. py:method:: read_text(path: str, encoding: str = 'utf-8') -> str
      :abstractmethod:

      :async:


      Read text content from a file.



   .. py:method:: write_bytes(path: str, content: bytes) -> StorageResult
      :abstractmethod:

      :async:


      Write binary content to a file.



   .. py:method:: write_text(path: str, content: str, encoding: str = 'utf-8') -> StorageResult
      :abstractmethod:

      :async:


      Write text content to a file.



.. py:class:: StorageBackend

   Bases: :py:obj:`abc.ABC`


   Base interface for all storage backends.


   .. py:method:: exists(path: str) -> bool
      :abstractmethod:

      :async:


      Check if a path exists.



   .. py:method:: get_info(path: str) -> Optional[FileInfo]
      :abstractmethod:

      :async:


      Get information about a file/directory.



   .. py:method:: list_directory(path: str = '.') -> List[FileInfo]
      :abstractmethod:

      :async:


      List contents of a directory.



.. py:class:: StorageResult

   Result of a storage operation.


   .. py:method:: __post_init__()


   .. py:attribute:: data
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: path
      :type:  Optional[str]
      :value: None



   .. py:attribute:: size
      :type:  Optional[int]
      :value: None



   .. py:attribute:: success
      :type:  bool


