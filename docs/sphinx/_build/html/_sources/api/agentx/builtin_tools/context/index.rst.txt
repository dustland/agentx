agentx.builtin_tools.context
============================

.. py:module:: agentx.builtin_tools.context

.. autoapi-nested-parse::

   Context Management Tools - LLM-friendly context tracking and management.

   Provides flexible context management with loose JSON parsing and natural language
   queries. Designed to work seamlessly with LLM agents without strict formatting.



Attributes
----------

.. autoapisummary::

   agentx.builtin_tools.context.logger


Classes
-------

.. autoapisummary::

   agentx.builtin_tools.context.ContextTool


Module Contents
---------------

.. py:class:: ContextTool(context_file: str = 'context.json', workspace_path: str = './workspace')

   Bases: :py:obj:`agentx.tool.models.Tool`


   Generic context management tool for tracking project state, variables, and metadata.

   Features:
   - Loose JSON parsing (handles malformed JSON gracefully)
   - Natural language queries for context retrieval
   - Flexible key-value storage with nested objects
   - Automatic timestamping and versioning
   - File-based persistence with backup


   .. py:method:: clear_context(backup: bool = True, keep_metadata: bool = True) -> agentx.tool.models.ToolResult
      :async:


      Clear context data with optional backup.

      :param backup: Whether to create a backup before clearing
      :param keep_metadata: Whether to preserve metadata

      :returns: ToolResult with operation status



   .. py:method:: get_context(query: str = '', keys: Optional[str] = None, format_output: str = 'json') -> agentx.tool.models.ToolResult
      :async:


      Retrieve context data with flexible querying.

      :param query: Natural language query or empty for all context
      :param keys: Comma-separated list of specific keys to retrieve
      :param format_output: Output format - "json", "text", or "summary"

      :returns: ToolResult with requested context data



   .. py:method:: update_context(updates: str, merge_strategy: str = 'merge') -> agentx.tool.models.ToolResult
      :async:


      Update context variables with loose JSON parsing.

      :param updates: JSON string or key-value pairs to update (flexible format)
      :param merge_strategy: How to handle updates - "merge", "replace", or "append"

      :returns: ToolResult with success status and updated context summary



   .. py:attribute:: context_data


   .. py:attribute:: context_file


   .. py:attribute:: workspace_path


.. py:data:: logger

