agentx.builtin_tools.web
========================

.. py:module:: agentx.builtin_tools.web

.. autoapi-nested-parse::

   Web Tools - Opinionated web automation and content extraction.

   Built-in integrations:
   - Firecrawl: Superior web content extraction (with fallback)
   - requests + BeautifulSoup: Reliable fallback for content extraction
   - browser-use: AI-first browser automation (better than Playwright for agents)



Classes
-------

.. autoapisummary::

   agentx.builtin_tools.web.BrowserAction
   agentx.builtin_tools.web.WebContent
   agentx.builtin_tools.web.WebTool


Module Contents
---------------

.. py:class:: BrowserAction

   Browser automation action result.


   .. py:attribute:: action
      :type:  str


   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: result
      :type:  Any


   .. py:attribute:: screenshot
      :type:  Optional[str]
      :value: None



   .. py:attribute:: success
      :type:  bool


.. py:class:: WebContent

   Extracted web content.


   .. py:attribute:: content
      :type:  str


   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: markdown
      :type:  str


   .. py:attribute:: metadata
      :type:  Dict[str, Any]


   .. py:attribute:: success
      :type:  bool


   .. py:attribute:: title
      :type:  str


   .. py:attribute:: url
      :type:  str


.. py:class:: WebTool(jina_api_key: Optional[str] = None)

   Bases: :py:obj:`agentx.tool.models.Tool`


   Web content extraction and browser automation tool.

   Combines Firecrawl for content extraction and browser-use for automation.


   .. py:method:: automate_browser(instruction: str, url: Optional[str] = None) -> agentx.tool.models.ToolResult
      :async:


      Perform browser automation using natural language instructions.

      :param instruction: Natural language instruction for browser action (required)
      :param url: Optional URL to navigate to first

      :returns: ToolResult with BrowserAction containing action result



   .. py:method:: crawl_website(url: str, limit: int = 10, exclude_paths: Optional[List[str]] = None) -> agentx.tool.models.ToolResult
      :async:


      Crawl multiple pages from a website.

      :param url: The base URL to start crawling from (required)
      :param limit: Maximum number of pages to crawl, defaults to 10
      :param exclude_paths: URL paths to exclude from crawling (optional)

      :returns: ToolResult with list of WebContent objects



   .. py:method:: extract_content(urls: Union[str, List[str]], prompt: str = 'Extract the main content from this webpage') -> agentx.tool.models.ToolResult
      :async:


      Extract clean content from one or more URLs using Jina Reader.

      Jina Reader is specifically designed for AI content extraction and handles
      anti-bot protection, JavaScript rendering, and modern web challenges.

      :param urls: A single URL or list of URLs to extract content from
      :param prompt: Description of what content to focus on (optional)

      :returns: ToolResult with extracted content



   .. py:method:: extract_content_with_visuals(url: str, prompt: str, capture_screenshot: bool = True, enable_web_search: bool = False) -> agentx.tool.models.ToolResult
      :async:


      Enhanced content extraction that captures both textual and visual data from web pages.
      This method is specifically designed to extract data from charts, graphs, infographics,
      and other visual elements that traditional text extraction might miss.

      :param url: Single URL to extract content from (required)
      :param prompt: Detailed prompt describing what to extract, including visual elements (required)
      :param capture_screenshot: Whether to capture full-page screenshot for visual analysis, defaults to True
      :param enable_web_search: Whether to expand search beyond the URL, defaults to False

      :returns: ToolResult with comprehensive extracted content including visual data



   .. py:attribute:: jina_api_key
      :value: None



