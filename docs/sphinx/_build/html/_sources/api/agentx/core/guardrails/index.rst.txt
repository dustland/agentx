agentx.core.guardrails
======================

.. py:module:: agentx.core.guardrails

.. autoapi-nested-parse::

   Guardrails Engine - Comprehensive Safety and Compliance System

   This module implements multi-layered safety mechanisms including input validation,
   output filtering, rate limiting, content safety, and policy compliance checks.



Attributes
----------

.. autoapisummary::

   agentx.core.guardrails.logger


Classes
-------

.. autoapisummary::

   agentx.core.guardrails.ComplianceRule
   agentx.core.guardrails.ContentFilterRule
   agentx.core.guardrails.ContentSafetyRule
   agentx.core.guardrails.GuardrailContext
   agentx.core.guardrails.GuardrailEngine
   agentx.core.guardrails.GuardrailRule
   agentx.core.guardrails.InputValidationRule
   agentx.core.guardrails.RateLimitRule
   agentx.core.guardrails.RateLimitState


Functions
---------

.. autoapisummary::

   agentx.core.guardrails.check_content_safety
   agentx.core.guardrails.get_guardrail_engine


Module Contents
---------------

.. py:class:: ComplianceRule(name: str, compliance_checks: List[Dict[str, Any]], **kwargs)

   Bases: :py:obj:`GuardrailRule`


   Compliance rule for organizational and regulatory requirements.


   .. py:method:: check(content: str, context: GuardrailContext) -> agentx.core.message.GuardrailCheck
      :async:


      Check content for compliance violations.



   .. py:attribute:: compliance_checks


.. py:class:: ContentFilterRule(name: str, keywords: List[str], **kwargs)

   Bases: :py:obj:`GuardrailRule`


   Content filtering rule for blocking inappropriate content.


   .. py:method:: check(content: str, context: GuardrailContext) -> agentx.core.message.GuardrailCheck
      :async:


      Check content for inappropriate keywords.



   .. py:attribute:: keywords


.. py:class:: ContentSafetyRule(name: str, safety_patterns: List[str], **kwargs)

   Bases: :py:obj:`GuardrailRule`


   Content safety rule using pattern matching and heuristics.


   .. py:method:: check(content: str, context: GuardrailContext) -> agentx.core.message.GuardrailCheck
      :async:


      Check content for safety violations.



   .. py:attribute:: safety_patterns


.. py:class:: GuardrailContext

   Context information for guardrail checks.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: content_type
      :type:  str
      :value: 'text'



   .. py:attribute:: metadata
      :type:  Dict[str, Any]


   .. py:attribute:: step_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: task_id
      :type:  Optional[str]
      :value: None



.. py:class:: GuardrailEngine

   Comprehensive guardrails engine for safety and compliance.

   Implements multi-layered safety mechanisms including input validation,
   output filtering, rate limiting, content safety, and policy compliance.


   .. py:method:: add_policy(policy: agentx.core.config.GuardrailPolicy)

      Add a guardrail policy to the engine.



   .. py:method:: check_content(content: str, context: GuardrailContext, policy_names: Optional[List[str]] = None) -> agentx.core.message.GuardrailPart
      :async:


      Check content against guardrail policies.

      :param content: Content to check
      :param context: Context information
      :param policy_names: Specific policies to check (None for all applicable)

      :returns: GuardrailPart with check results



   .. py:method:: get_policy_names() -> List[str]

      Get list of available policy names.



   .. py:method:: get_policy_stats() -> Dict[str, Any]

      Get statistics about guardrail policies and checks.



   .. py:method:: should_block_content(guardrail_part: agentx.core.message.GuardrailPart) -> bool

      Determine if content should be blocked based on guardrail results.



   .. py:attribute:: global_rules
      :type:  List[GuardrailRule]
      :value: []



   .. py:attribute:: policies
      :type:  Dict[str, List[GuardrailRule]]


.. py:class:: GuardrailRule(name: str, severity: str = 'medium', action: str = 'warn')

   Bases: :py:obj:`abc.ABC`


   Abstract base class for guardrail rules.


   .. py:method:: check(content: str, context: GuardrailContext) -> agentx.core.message.GuardrailCheck
      :abstractmethod:

      :async:


      Check content against this rule.



   .. py:attribute:: action
      :value: 'warn'



   .. py:attribute:: name


   .. py:attribute:: severity
      :value: 'medium'



.. py:class:: InputValidationRule(name: str, patterns: List[str], **kwargs)

   Bases: :py:obj:`GuardrailRule`


   Input validation rule for sanitizing user inputs.


   .. py:method:: check(content: str, context: GuardrailContext) -> agentx.core.message.GuardrailCheck
      :async:


      Check input against validation patterns.



   .. py:attribute:: patterns


.. py:class:: RateLimitRule(name: str, max_requests: int, window_seconds: int, **kwargs)

   Bases: :py:obj:`GuardrailRule`


   Rate limiting rule for preventing abuse.


   .. py:method:: check(content: str, context: GuardrailContext) -> agentx.core.message.GuardrailCheck
      :async:


      Check rate limits for the agent.



   .. py:attribute:: max_requests


   .. py:attribute:: state
      :type:  Dict[str, RateLimitState]


   .. py:attribute:: window_seconds


.. py:class:: RateLimitState

   Rate limiting state tracking.


   .. py:attribute:: count
      :type:  int
      :value: 0



   .. py:attribute:: last_request
      :type:  datetime.datetime


   .. py:attribute:: window_start
      :type:  datetime.datetime


.. py:function:: check_content_safety(content: str, agent_name: str, policy_names: Optional[List[str]] = None, task_id: Optional[str] = None, step_id: Optional[str] = None) -> agentx.core.message.GuardrailPart
   :async:


   Convenience function to check content safety.

   :param content: Content to check
   :param agent_name: Name of the agent
   :param policy_names: Specific policies to check
   :param task_id: Optional task ID
   :param step_id: Optional step ID

   :returns: GuardrailPart with check results


.. py:function:: get_guardrail_engine() -> GuardrailEngine

   Get the global guardrail engine instance.


.. py:data:: logger

