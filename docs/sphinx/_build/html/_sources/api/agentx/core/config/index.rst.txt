agentx.core.config
==================

.. py:module:: agentx.core.config


Exceptions
----------

.. autoapisummary::

   agentx.core.config.ConfigurationError


Classes
-------

.. autoapisummary::

   agentx.core.config.AgentConfig
   agentx.core.config.BrainConfig
   agentx.core.config.CollaborationPattern
   agentx.core.config.CollaborationPatternType
   agentx.core.config.ExecutionMode
   agentx.core.config.GuardrailPolicy
   agentx.core.config.GuardrailType
   agentx.core.config.Handoff
   agentx.core.config.LLMProvider
   agentx.core.config.MemoryConfig
   agentx.core.config.OrchestratorConfig
   agentx.core.config.TaskConfig
   agentx.core.config.TeamConfig
   agentx.core.config.ToolConfig
   agentx.core.config.ToolType


Module Contents
---------------

.. py:exception:: ConfigurationError

   Bases: :py:obj:`Exception`


   Custom exception for configuration errors.

   Initialize self.  See help(type(self)) for accurate signature.


.. py:class:: AgentConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Unified agent configuration for file definition and runtime.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:class:: Config

      .. py:attribute:: extra
         :value: 'allow'




   .. py:attribute:: auto_reply
      :type:  bool
      :value: True



   .. py:attribute:: brain_config
      :type:  Optional[BrainConfig]
      :value: None



   .. py:attribute:: collaboration_patterns
      :type:  List[str]
      :value: None



   .. py:attribute:: description
      :type:  Optional[str]
      :value: ''



   .. py:attribute:: enable_code_execution
      :type:  bool
      :value: False



   .. py:attribute:: enable_human_interaction
      :type:  bool
      :value: False



   .. py:attribute:: enable_memory
      :type:  bool
      :value: True



   .. py:attribute:: guardrail_policies
      :type:  List[str]
      :value: None



   .. py:attribute:: max_consecutive_replies
      :type:  int
      :value: 10



   .. py:attribute:: max_parallel_tasks
      :type:  int
      :value: 1



   .. py:attribute:: memory_config
      :type:  Optional[MemoryConfig]
      :value: None



   .. py:attribute:: name
      :type:  str


   .. py:attribute:: prompt_file
      :type:  Optional[str]
      :value: None



   .. py:attribute:: prompt_template
      :type:  Optional[str]
      :value: None



   .. py:attribute:: role
      :type:  str
      :value: 'assistant'



   .. py:attribute:: system_message
      :type:  Optional[str]
      :value: None



   .. py:attribute:: tools
      :type:  List[str]
      :value: None



.. py:class:: BrainConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Brain configuration with DeepSeek as default provider.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:method:: set_default_base_url()


   .. py:attribute:: api_key
      :type:  Optional[str]
      :value: None



   .. py:attribute:: base_url
      :type:  Optional[str]
      :value: None



   .. py:attribute:: max_tokens
      :type:  int
      :value: 4000



   .. py:attribute:: model
      :type:  str
      :value: 'deepseek-chat'



   .. py:attribute:: provider
      :type:  str
      :value: 'deepseek'



   .. py:attribute:: retry_policy
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: streaming
      :type:  bool
      :value: True



   .. py:attribute:: supports_function_calls
      :type:  bool
      :value: True



   .. py:attribute:: temperature
      :type:  float
      :value: 0.7



   .. py:attribute:: timeout
      :type:  int
      :value: 30



.. py:class:: CollaborationPattern(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Custom collaboration pattern configuration.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agents
      :type:  List[str]


   .. py:attribute:: config
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: coordination_agent
      :type:  Optional[str]
      :value: None



   .. py:attribute:: name
      :type:  str


   .. py:attribute:: type
      :type:  str


.. py:class:: CollaborationPatternType

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Types of collaboration patterns.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: CONSENSUS
      :value: 'consensus'



   .. py:attribute:: DYNAMIC
      :value: 'dynamic'



   .. py:attribute:: PARALLEL
      :value: 'parallel'



   .. py:attribute:: SEQUENTIAL
      :value: 'sequential'



.. py:class:: ExecutionMode

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Execution modes for task processing.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: AUTONOMOUS
      :value: 'autonomous'



   .. py:attribute:: STEP_THROUGH
      :value: 'step_through'



.. py:class:: GuardrailPolicy(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Guardrail policy for safety and compliance.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: action
      :type:  str
      :value: 'warn'



   .. py:attribute:: name
      :type:  str


   .. py:attribute:: rules
      :type:  List[Dict[str, Any]]


   .. py:attribute:: severity
      :type:  str
      :value: 'medium'



   .. py:attribute:: type
      :type:  str


.. py:class:: GuardrailType

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Types of guardrails.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: CONTENT_SAFETY
      :value: 'content_safety'



   .. py:attribute:: INPUT_VALIDATION
      :value: 'input_validation'



   .. py:attribute:: OUTPUT_FILTERING
      :value: 'output_filtering'



   .. py:attribute:: RATE_LIMITING
      :value: 'rate_limiting'



.. py:class:: Handoff(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Defines when and how agents should hand off control.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: condition
      :type:  str


   .. py:attribute:: from_agent
      :type:  str


   .. py:attribute:: priority
      :type:  int
      :value: 1



   .. py:attribute:: to_agent
      :type:  str


.. py:class:: LLMProvider

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Supported LLM providers.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: ANTHROPIC
      :value: 'anthropic'



   .. py:attribute:: CUSTOM
      :value: 'custom'



   .. py:attribute:: DEEPSEEK
      :value: 'deepseek'



   .. py:attribute:: OLLAMA
      :value: 'ollama'



   .. py:attribute:: OPENAI
      :value: 'openai'



.. py:class:: MemoryConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Memory system configuration.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: consolidation_interval
      :type:  int
      :value: 3600



   .. py:attribute:: enabled
      :type:  bool
      :value: True



   .. py:attribute:: long_term_enabled
      :type:  bool
      :value: True



   .. py:attribute:: max_context_tokens
      :type:  int
      :value: 8000



   .. py:attribute:: semantic_search_enabled
      :type:  bool
      :value: True



   .. py:attribute:: short_term_limit
      :type:  int
      :value: 10000



   .. py:attribute:: vector_db_config
      :type:  Dict[str, Any]
      :value: None



.. py:class:: OrchestratorConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Configuration for the orchestrator's Brain and behavior.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:method:: get_default_brain_config() -> BrainConfig

      Get default Brain config for orchestrator if none specified.



   .. py:attribute:: brain_config
      :type:  Optional[BrainConfig]
      :value: None



   .. py:attribute:: max_rounds
      :type:  int
      :value: 50



   .. py:attribute:: timeout
      :type:  int
      :value: 3600



.. py:class:: TaskConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Task-specific configuration for execution control.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: after_work_behavior
      :type:  str
      :value: 'return_to_user'



   .. py:attribute:: breakpoints
      :type:  List[str]
      :value: None



   .. py:attribute:: context_variables
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: deployment_config
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: failure_criteria
      :type:  List[str]
      :value: None



   .. py:attribute:: human_intervention_points
      :type:  List[str]
      :value: None



   .. py:attribute:: initial_agent
      :type:  Optional[str]
      :value: None



   .. py:attribute:: max_rounds
      :type:  int
      :value: 10



   .. py:attribute:: max_steps
      :type:  Optional[int]
      :value: None



   .. py:attribute:: mode
      :type:  str
      :value: 'autonomous'



   .. py:attribute:: orchestrator
      :type:  OrchestratorConfig
      :value: None



   .. py:attribute:: step_through_enabled
      :type:  bool
      :value: False



   .. py:attribute:: success_criteria
      :type:  List[str]
      :value: None



   .. py:attribute:: timeout
      :type:  int
      :value: 3600



   .. py:attribute:: timeout_seconds
      :type:  int
      :value: 300



.. py:class:: TeamConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Configuration for a team of agents.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: after_work_behavior
      :type:  str
      :value: 'return_to_user'



   .. py:attribute:: agents
      :type:  List[AgentConfig]
      :value: None



   .. py:attribute:: collaboration_patterns
      :type:  List[CollaborationPattern]
      :value: None



   .. py:attribute:: context_variables
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: deployment_config
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: description
      :type:  str
      :value: ''



   .. py:attribute:: execution
      :type:  TaskConfig
      :value: None



   .. py:attribute:: guardrail_policies
      :type:  List[GuardrailPolicy]
      :value: None



   .. py:attribute:: handoffs
      :type:  List[Handoff]
      :value: None



   .. py:attribute:: llm_provider
      :type:  Optional[BrainConfig]
      :value: None



   .. py:attribute:: max_rounds
      :type:  int
      :value: 10



   .. py:attribute:: memory
      :type:  MemoryConfig
      :value: None



   .. py:attribute:: name
      :type:  str


   .. py:attribute:: orchestrator
      :type:  OrchestratorConfig
      :value: None



   .. py:attribute:: output_dir
      :type:  str
      :value: 'workspace'



   .. py:attribute:: speaker_selection_method
      :type:  str
      :value: 'auto'



   .. py:attribute:: termination_condition
      :type:  str
      :value: 'TERMINATE'



   .. py:attribute:: timeout
      :type:  int
      :value: 3600



   .. py:attribute:: tools
      :type:  List[ToolConfig]
      :value: None



.. py:class:: ToolConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Tool configuration supporting multiple tool types.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: config
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: description
      :type:  Optional[str]
      :value: None



   .. py:attribute:: escalation_policy
      :type:  Optional[str]
      :value: None



   .. py:attribute:: function
      :type:  Optional[str]
      :value: None



   .. py:attribute:: name
      :type:  str


   .. py:attribute:: parameters
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: path
      :type:  Optional[str]
      :value: None



   .. py:attribute:: server_url
      :type:  Optional[str]
      :value: None



   .. py:attribute:: source
      :type:  Optional[str]
      :value: None



   .. py:attribute:: timeout
      :type:  Optional[int]
      :value: None



   .. py:attribute:: type
      :type:  Union[ToolType, str]


.. py:class:: ToolType

   Bases: :py:obj:`str`, :py:obj:`enum.Enum`


   Types of tools supported by the framework.

   Initialize self.  See help(type(self)) for accurate signature.


   .. py:attribute:: BUILTIN
      :value: 'builtin'



   .. py:attribute:: MCP_TOOL
      :value: 'mcp_tool'



   .. py:attribute:: PYTHON_FUNCTION
      :value: 'python_function'



   .. py:attribute:: SHELL_SCRIPT
      :value: 'shell_script'



