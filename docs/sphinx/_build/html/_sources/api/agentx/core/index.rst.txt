agentx.core
===========

.. py:module:: agentx.core


Submodules
----------

.. toctree::
   :maxdepth: 1

   /api/agentx/core/agent/index
   /api/agentx/core/brain/index
   /api/agentx/core/config/index
   /api/agentx/core/event/index
   /api/agentx/core/exceptions/index
   /api/agentx/core/guardrails/index
   /api/agentx/core/memory/index
   /api/agentx/core/message/index
   /api/agentx/core/orchestrator/index
   /api/agentx/core/plan/index
   /api/agentx/core/task/index
   /api/agentx/core/tool/index


Classes
-------

.. autoapisummary::

   agentx.core.Artifact
   agentx.core.ArtifactPart
   agentx.core.AudioPart
   agentx.core.Brain
   agentx.core.BrainMessage
   agentx.core.BrainResponse
   agentx.core.GuardrailPart
   agentx.core.ImagePart
   agentx.core.MemoryPart
   agentx.core.Orchestrator
   agentx.core.StreamChunk
   agentx.core.StreamComplete
   agentx.core.StreamError
   agentx.core.TaskExecutor
   agentx.core.TaskStep
   agentx.core.TextPart
   agentx.core.ToolCall
   agentx.core.ToolCallPart
   agentx.core.ToolResult
   agentx.core.ToolResultPart


Package Contents
----------------

.. py:class:: Artifact(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Artifact reference with versioning and metadata.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: checksum
      :type:  Optional[str]
      :value: None



   .. py:attribute:: created_by
      :type:  Optional[str]
      :value: None



   .. py:attribute:: description
      :type:  Optional[str]
      :value: None



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: mime_type
      :type:  str


   .. py:attribute:: size_bytes
      :type:  Optional[int]
      :value: None



   .. py:attribute:: tags
      :type:  List[str]
      :value: None



   .. py:attribute:: uri
      :type:  str


   .. py:attribute:: version
      :type:  Optional[str]
      :value: None



.. py:class:: ArtifactPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Artifact reference part.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: artifact
      :type:  Artifact


   .. py:attribute:: type
      :type:  Literal['artifact']
      :value: 'artifact'



.. py:class:: AudioPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Audio content part with metadata.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: audio_url
      :type:  str


   .. py:attribute:: duration_seconds
      :type:  Optional[float]
      :value: None



   .. py:attribute:: format
      :type:  Optional[str]
      :value: None



   .. py:attribute:: sample_rate
      :type:  Optional[int]
      :value: None



   .. py:attribute:: transcript
      :type:  Optional[str]
      :value: None



   .. py:attribute:: type
      :type:  Literal['audio']
      :value: 'audio'



.. py:class:: Brain(config: agentx.core.config.BrainConfig)

   Brain component that handles all LLM interactions for an agent.

   This is a PURE LLM interface - it does not execute tools or handle
   conversation flow. Those responsibilities belong to the orchestrator.

   The Brain's only job is:
   1. Format messages for the LLM
   2. Make API calls
   3. Parse and return responses

   Initialize Brain with Brain configuration.

   :param config: Brain configuration including provider, model, etc.


   .. py:method:: add_usage_callback(callback)

      Add a callback function to be called after each LLM request.

      The callback will be called with (model, usage_data, response) parameters.
      - For streaming: callback(model, usage_data, None)
      - For non-streaming: callback(model, None, response)

      :param callback: Function to call with usage data



   .. py:method:: from_config(brain_config: agentx.core.config.BrainConfig) -> Brain
      :classmethod:


      Create Brain instance from configuration.



   .. py:method:: generate_response(messages: List[Dict[str, Any]], system_prompt: Optional[str] = None, temperature: Optional[float] = None, tools: Optional[List[Dict[str, Any]]] = None, json_mode: bool = False) -> BrainResponse
      :async:


      Generate a single response from the LLM.

      This is a PURE LLM call - no tool execution, no conversation management.
      If the LLM requests tool calls, they are returned in the response for
      the orchestrator to handle.

      :param messages: Conversation history
      :param system_prompt: Optional system prompt
      :param temperature: Override temperature
      :param tools: Available tools for the LLM

      :returns: LLM response (may contain tool call requests)



   .. py:method:: remove_usage_callback(callback)

      Remove a usage callback.



   .. py:method:: stream_response(messages: List[Dict[str, Any]], system_prompt: Optional[str] = None, temperature: Optional[float] = None, tools: Optional[List[Dict[str, Any]]] = None) -> AsyncGenerator[Dict[str, Any], None]
      :async:


      Stream response from the LLM with integrated tool call detection.

      Handles both native function calling models and text-based tool calling,
      always emitting structured tool-call and tool-result chunks for client visualization.

      :param messages: Conversation history
      :param system_prompt: Optional system prompt
      :param temperature: Override temperature
      :param tools: Available tools for the LLM

      :Yields: *Dict[str, Any]* -- Structured chunks with type and data:
               - {'type': 'text-delta', 'content': str} - Text content chunks
               - {'type': 'tool-call', 'tool_call': obj} - Tool call requests
               - {'type': 'tool-result', 'tool_call_id': str, 'result': any} - Tool results
               - {'type': 'finish', 'finish_reason': str} - Stream completion
               - {'type': 'error', 'content': str} - Error messages



   .. py:attribute:: config


   .. py:attribute:: initialized
      :value: False



.. py:class:: BrainMessage(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Standard message format for brain interactions.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: content
      :type:  Optional[str]
      :value: None



   .. py:attribute:: name
      :type:  Optional[str]
      :value: None



   .. py:attribute:: role
      :type:  str


   .. py:attribute:: timestamp
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: tool_call_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: tool_calls
      :type:  Optional[List[Any]]
      :value: None



.. py:class:: BrainResponse(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Response from brain call, which can be either text content or a request to call tools.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: content
      :type:  Optional[str]
      :value: None



   .. py:attribute:: finish_reason
      :type:  Optional[str]
      :value: None



   .. py:attribute:: model
      :type:  str


   .. py:attribute:: timestamp
      :type:  datetime.datetime


   .. py:attribute:: tool_calls
      :type:  Optional[List[Any]]
      :value: None



   .. py:attribute:: usage
      :type:  Optional[Dict[str, Any]]
      :value: None



.. py:class:: GuardrailPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Guardrail check results part.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: checks
      :type:  List[GuardrailCheck]


   .. py:attribute:: overall_status
      :type:  str


   .. py:attribute:: type
      :type:  Literal['guardrail']
      :value: 'guardrail'



.. py:class:: ImagePart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Image content part with metadata.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: alt_text
      :type:  Optional[str]
      :value: None



   .. py:attribute:: dimensions
      :type:  Optional[Dict[str, int]]
      :value: None



   .. py:attribute:: format
      :type:  Optional[str]
      :value: None



   .. py:attribute:: image_url
      :type:  str


   .. py:attribute:: type
      :type:  Literal['image']
      :value: 'image'



.. py:class:: MemoryPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Memory operation part.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: content
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: operation
      :type:  str


   .. py:attribute:: references
      :type:  List[MemoryReference]


   .. py:attribute:: type
      :type:  Literal['memory']
      :value: 'memory'



.. py:class:: Orchestrator(team_config: agentx.core.config.TeamConfig, message_queue: agentx.core.message.MessageQueue, tool_manager: agentx.tool.manager.ToolManager, agents: Dict[str, agentx.core.agent.Agent])

   .. py:method:: run(task: agentx.core.task.Task) -> AsyncGenerator[agentx.core.message.Message, None]
      :async:



   .. py:attribute:: agents


   .. py:attribute:: message_queue


   .. py:attribute:: routing_brain
      :type:  Optional[agentx.core.brain.Brain]


   .. py:attribute:: team_config


   .. py:attribute:: tool_manager


.. py:class:: StreamChunk(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Token-by-token message streaming from LLM.

   This is Channel 1 of the dual-channel system - provides low-latency
   UI updates for "typing" effect. This is message streaming, not events.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: is_final
      :type:  bool
      :value: False



   .. py:attribute:: step_id
      :type:  str


   .. py:attribute:: text
      :type:  str


   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: token_count
      :type:  Optional[int]
      :value: None



   .. py:attribute:: type
      :type:  Literal['content_chunk']
      :value: 'content_chunk'



.. py:class:: StreamComplete(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Message streaming completion marker.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: step_id
      :type:  str


   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: total_tokens
      :type:  Optional[int]
      :value: None



   .. py:attribute:: type
      :type:  Literal['stream_complete']
      :value: 'stream_complete'



.. py:class:: StreamError(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Error in message streaming.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: error_code
      :type:  Optional[str]
      :value: None



   .. py:attribute:: error_message
      :type:  str


   .. py:attribute:: step_id
      :type:  str


   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: type
      :type:  Literal['stream_error']
      :value: 'stream_error'



.. py:class:: TaskExecutor(team_config: Union[agentx.core.config.TeamConfig, str], task_id: Optional[str] = None, workspace_dir: Optional[pathlib.Path] = None)

   The main engine for executing a task. It coordinates the agents, tools,
   and orchestrator to fulfill the user's request.


   .. py:method:: start(prompt: str, stream: bool = False) -> AsyncGenerator[agentx.core.message.Message, None]
      :async:


      Starts the task execution and streams back events.



   .. py:attribute:: agents


   .. py:attribute:: history


   .. py:attribute:: message_queue


   .. py:attribute:: orchestrator


   .. py:attribute:: task
      :type:  Optional[Task]
      :value: None



   .. py:attribute:: task_id
      :value: ''



   .. py:attribute:: tool_manager


   .. py:attribute:: workspace


.. py:class:: TaskStep(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   A single step in a task's conversation history.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: parts
      :type:  List[ConversationPart]


   .. py:attribute:: step_id
      :type:  str
      :value: None



   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



.. py:class:: TextPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Text content part with language and confidence support.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: confidence
      :type:  Optional[float]
      :value: None



   .. py:attribute:: language
      :type:  Optional[str]
      :value: None



   .. py:attribute:: text
      :type:  str


   .. py:attribute:: type
      :type:  Literal['text']
      :value: 'text'



.. py:class:: ToolCall(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Tool call specification with retry policy.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: args
      :type:  Dict[str, Any]


   .. py:attribute:: expected_output_type
      :type:  Optional[str]
      :value: None



   .. py:attribute:: id
      :type:  str
      :value: None



   .. py:attribute:: retry_policy
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: timeout
      :type:  Optional[int]
      :value: None



   .. py:attribute:: tool_name
      :type:  str


.. py:class:: ToolCallPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Tool call request part - conversation representation.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: args
      :type:  Dict[str, Any]


   .. py:attribute:: expected_output_type
      :type:  Optional[str]
      :value: None



   .. py:attribute:: tool_call_id
      :type:  str


   .. py:attribute:: tool_name
      :type:  str


   .. py:attribute:: type
      :type:  Literal['tool_call']
      :value: 'tool_call'



.. py:class:: ToolResult

   Result of tool execution.


   .. py:method:: __post_init__()


   .. py:attribute:: error
      :type:  Optional[str]
      :value: None



   .. py:attribute:: execution_time
      :type:  float
      :value: 0.0



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: result
      :type:  Any


   .. py:attribute:: success
      :type:  bool


.. py:class:: ToolResultPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Tool execution result part.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: is_error
      :type:  bool
      :value: False



   .. py:attribute:: result
      :type:  Any


   .. py:attribute:: tool_call_id
      :type:  str


   .. py:attribute:: tool_name
      :type:  str


   .. py:attribute:: type
      :type:  Literal['tool_result']
      :value: 'tool_result'



