agentx.core.memory
==================

.. py:module:: agentx.core.memory

.. autoapi-nested-parse::

   Memory component for context and knowledge management.

   This module provides the main Memory interface that agents use, backed by
   intelligent memory backends (Mem0) for semantic search and advanced operations.



Attributes
----------

.. autoapisummary::

   agentx.core.memory.logger


Classes
-------

.. autoapisummary::

   agentx.core.memory.Memory
   agentx.core.memory.MemoryItem


Module Contents
---------------

.. py:class:: Memory(agent: Agent, config=None)

   Memory component for individual agents.

   Provides a simple interface backed by intelligent memory backends
   for semantic search and advanced memory operations.


   .. py:method:: clear() -> bool

      Clear all memories for this agent (sync wrapper).



   .. py:method:: clear_async() -> bool
      :async:


      Clear all memories for this agent.



   .. py:method:: delete(memory_id: str) -> bool

      Delete a memory by ID (sync wrapper).



   .. py:method:: delete_async(memory_id: str) -> bool
      :async:


      Delete a memory by ID.



   .. py:method:: get(memory_id: str) -> Optional[MemoryItem]

      Get a specific memory by ID (sync wrapper).



   .. py:method:: get_async(memory_id: str) -> Optional[MemoryItem]
      :async:


      Get a specific memory by ID.



   .. py:method:: save(content: str, metadata: Optional[Dict[str, Any]] = None, importance: float = 1.0) -> str

      Save content to memory (sync wrapper).



   .. py:method:: save_async(content: str, metadata: Optional[Dict[str, Any]] = None, importance: float = 1.0) -> str
      :async:


      Save content to memory.



   .. py:method:: search(query: str, limit: int = 10) -> List[MemoryItem]

      Search memories by content (sync wrapper).



   .. py:method:: search_async(query: str, limit: int = 10) -> List[MemoryItem]
      :async:


      Search memories by content.



   .. py:attribute:: agent


.. py:class:: MemoryItem

   Individual memory item.


   .. py:method:: from_dict(data: Dict[str, Any]) -> MemoryItem
      :classmethod:


      Create from dictionary.



   .. py:method:: to_dict() -> Dict[str, Any]

      Convert to dictionary.



   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: content
      :type:  str


   .. py:attribute:: importance
      :type:  float
      :value: 1.0



   .. py:attribute:: memory_id
      :type:  str
      :value: ''



   .. py:attribute:: memory_type
      :type:  agentx.memory.types.MemoryType


   .. py:attribute:: metadata
      :type:  Dict[str, Any]


   .. py:attribute:: timestamp
      :type:  datetime.datetime


.. py:data:: logger

