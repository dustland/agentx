agentx.core.brain
=================

.. py:module:: agentx.core.brain

.. autoapi-nested-parse::

   Brain Component - Pure LLM Gateway

   Handles all LLM interactions for agents, including provider abstraction,
   prompt formatting, and response parsing. Does NOT handle tool execution -
   that's the orchestrator's responsibility.



Attributes
----------

.. autoapisummary::

   agentx.core.brain.logger


Classes
-------

.. autoapisummary::

   agentx.core.brain.Brain
   agentx.core.brain.BrainMessage
   agentx.core.brain.BrainResponse


Module Contents
---------------

.. py:class:: Brain(config: agentx.core.config.BrainConfig)

   Brain component that handles all LLM interactions for an agent.

   This is a PURE LLM interface - it does not execute tools or handle
   conversation flow. Those responsibilities belong to the orchestrator.

   The Brain's only job is:
   1. Format messages for the LLM
   2. Make API calls
   3. Parse and return responses

   Initialize Brain with Brain configuration.

   :param config: Brain configuration including provider, model, etc.


   .. py:method:: add_usage_callback(callback)

      Add a callback function to be called after each LLM request.

      The callback will be called with (model, usage_data, response) parameters.
      - For streaming: callback(model, usage_data, None)
      - For non-streaming: callback(model, None, response)

      :param callback: Function to call with usage data



   .. py:method:: from_config(brain_config: agentx.core.config.BrainConfig) -> Brain
      :classmethod:


      Create Brain instance from configuration.



   .. py:method:: generate_response(messages: List[Dict[str, Any]], system_prompt: Optional[str] = None, temperature: Optional[float] = None, tools: Optional[List[Dict[str, Any]]] = None, json_mode: bool = False) -> BrainResponse
      :async:


      Generate a single response from the LLM.

      This is a PURE LLM call - no tool execution, no conversation management.
      If the LLM requests tool calls, they are returned in the response for
      the orchestrator to handle.

      :param messages: Conversation history
      :param system_prompt: Optional system prompt
      :param temperature: Override temperature
      :param tools: Available tools for the LLM

      :returns: LLM response (may contain tool call requests)



   .. py:method:: remove_usage_callback(callback)

      Remove a usage callback.



   .. py:method:: stream_response(messages: List[Dict[str, Any]], system_prompt: Optional[str] = None, temperature: Optional[float] = None, tools: Optional[List[Dict[str, Any]]] = None) -> AsyncGenerator[Dict[str, Any], None]
      :async:


      Stream response from the LLM with integrated tool call detection.

      Handles both native function calling models and text-based tool calling,
      always emitting structured tool-call and tool-result chunks for client visualization.

      :param messages: Conversation history
      :param system_prompt: Optional system prompt
      :param temperature: Override temperature
      :param tools: Available tools for the LLM

      :Yields: *Dict[str, Any]* -- Structured chunks with type and data:
               - {'type': 'text-delta', 'content': str} - Text content chunks
               - {'type': 'tool-call', 'tool_call': obj} - Tool call requests
               - {'type': 'tool-result', 'tool_call_id': str, 'result': any} - Tool results
               - {'type': 'finish', 'finish_reason': str} - Stream completion
               - {'type': 'error', 'content': str} - Error messages



   .. py:attribute:: config


   .. py:attribute:: initialized
      :value: False



.. py:class:: BrainMessage(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Standard message format for brain interactions.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: content
      :type:  Optional[str]
      :value: None



   .. py:attribute:: name
      :type:  Optional[str]
      :value: None



   .. py:attribute:: role
      :type:  str


   .. py:attribute:: timestamp
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: tool_call_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: tool_calls
      :type:  Optional[List[Any]]
      :value: None



.. py:class:: BrainResponse(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Response from brain call, which can be either text content or a request to call tools.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: content
      :type:  Optional[str]
      :value: None



   .. py:attribute:: finish_reason
      :type:  Optional[str]
      :value: None



   .. py:attribute:: model
      :type:  str


   .. py:attribute:: timestamp
      :type:  datetime.datetime


   .. py:attribute:: tool_calls
      :type:  Optional[List[Any]]
      :value: None



   .. py:attribute:: usage
      :type:  Optional[Dict[str, Any]]
      :value: None



.. py:data:: logger

