agentx.core.message
===================

.. py:module:: agentx.core.message


Attributes
----------

.. autoapisummary::

   agentx.core.message.ConversationPart


Classes
-------

.. autoapisummary::

   agentx.core.message.Artifact
   agentx.core.message.ArtifactPart
   agentx.core.message.AudioPart
   agentx.core.message.GuardrailCheck
   agentx.core.message.GuardrailPart
   agentx.core.message.ImagePart
   agentx.core.message.MemoryPart
   agentx.core.message.MemoryReference
   agentx.core.message.Message
   agentx.core.message.MessageQueue
   agentx.core.message.StreamChunk
   agentx.core.message.StreamComplete
   agentx.core.message.StreamError
   agentx.core.message.TaskHistory
   agentx.core.message.TaskStep
   agentx.core.message.TextPart
   agentx.core.message.ToolCallPart
   agentx.core.message.ToolResultPart
   agentx.core.message.UserMessage


Module Contents
---------------

.. py:class:: Artifact(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Artifact reference with versioning and metadata.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: checksum
      :type:  Optional[str]
      :value: None



   .. py:attribute:: created_by
      :type:  Optional[str]
      :value: None



   .. py:attribute:: description
      :type:  Optional[str]
      :value: None



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: mime_type
      :type:  str


   .. py:attribute:: size_bytes
      :type:  Optional[int]
      :value: None



   .. py:attribute:: tags
      :type:  List[str]
      :value: None



   .. py:attribute:: uri
      :type:  str


   .. py:attribute:: version
      :type:  Optional[str]
      :value: None



.. py:class:: ArtifactPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Artifact reference part.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: artifact
      :type:  Artifact


   .. py:attribute:: type
      :type:  Literal['artifact']
      :value: 'artifact'



.. py:class:: AudioPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Audio content part with metadata.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: audio_url
      :type:  str


   .. py:attribute:: duration_seconds
      :type:  Optional[float]
      :value: None



   .. py:attribute:: format
      :type:  Optional[str]
      :value: None



   .. py:attribute:: sample_rate
      :type:  Optional[int]
      :value: None



   .. py:attribute:: transcript
      :type:  Optional[str]
      :value: None



   .. py:attribute:: type
      :type:  Literal['audio']
      :value: 'audio'



.. py:class:: GuardrailCheck(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Individual guardrail check result.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: check_id
      :type:  str


   .. py:attribute:: check_type
      :type:  str


   .. py:attribute:: message
      :type:  Optional[str]
      :value: None



   .. py:attribute:: policy_violated
      :type:  Optional[str]
      :value: None



   .. py:attribute:: severity
      :type:  Optional[str]
      :value: None



   .. py:attribute:: status
      :type:  str


.. py:class:: GuardrailPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Guardrail check results part.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: checks
      :type:  List[GuardrailCheck]


   .. py:attribute:: overall_status
      :type:  str


   .. py:attribute:: type
      :type:  Literal['guardrail']
      :value: 'guardrail'



.. py:class:: ImagePart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Image content part with metadata.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: alt_text
      :type:  Optional[str]
      :value: None



   .. py:attribute:: dimensions
      :type:  Optional[Dict[str, int]]
      :value: None



   .. py:attribute:: format
      :type:  Optional[str]
      :value: None



   .. py:attribute:: image_url
      :type:  str


   .. py:attribute:: type
      :type:  Literal['image']
      :value: 'image'



.. py:class:: MemoryPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Memory operation part.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: content
      :type:  Optional[Dict[str, Any]]
      :value: None



   .. py:attribute:: operation
      :type:  str


   .. py:attribute:: references
      :type:  List[MemoryReference]


   .. py:attribute:: type
      :type:  Literal['memory']
      :value: 'memory'



.. py:class:: MemoryReference(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Memory reference with relevance scoring.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: memory_id
      :type:  str


   .. py:attribute:: memory_type
      :type:  str


   .. py:attribute:: relevance_score
      :type:  Optional[float]
      :value: None



   .. py:attribute:: retrieval_query
      :type:  Optional[str]
      :value: None



.. py:class:: Message(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Standard chat message format compatible with LLM APIs and Vercel AI SDK.

   This follows the industry standard format with role/content/parts structure.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:method:: assistant_message(content: str, parts: Optional[List[ConversationPart]] = None) -> Message
      :classmethod:


      Create an assistant message.



   .. py:method:: system_message(content: str, parts: Optional[List[ConversationPart]] = None) -> Message
      :classmethod:


      Create a system message.



   .. py:method:: user_message(content: str, parts: Optional[List[ConversationPart]] = None) -> Message
      :classmethod:


      Create a user message.



   .. py:attribute:: content
      :type:  str
      :value: ''



   .. py:attribute:: id
      :type:  str
      :value: None



   .. py:attribute:: parts
      :type:  List[ConversationPart]
      :value: None



   .. py:attribute:: role
      :type:  Literal['system', 'user', 'assistant', 'tool']
      :value: 'user'



   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



.. py:class:: MessageQueue(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Queue for managing message flow in tasks.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:method:: add(message: Message) -> None

      Add a message to the queue.



   .. py:method:: clear() -> None

      Clear all messages from the queue.



   .. py:method:: get_all() -> List[Message]

      Get all messages in the queue.



   .. py:attribute:: max_size
      :type:  int
      :value: 1000



   .. py:attribute:: messages
      :type:  List[Message]
      :value: None



.. py:class:: StreamChunk(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Token-by-token message streaming from LLM.

   This is Channel 1 of the dual-channel system - provides low-latency
   UI updates for "typing" effect. This is message streaming, not events.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: is_final
      :type:  bool
      :value: False



   .. py:attribute:: step_id
      :type:  str


   .. py:attribute:: text
      :type:  str


   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: token_count
      :type:  Optional[int]
      :value: None



   .. py:attribute:: type
      :type:  Literal['content_chunk']
      :value: 'content_chunk'



.. py:class:: StreamComplete(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Message streaming completion marker.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: step_id
      :type:  str


   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: total_tokens
      :type:  Optional[int]
      :value: None



   .. py:attribute:: type
      :type:  Literal['stream_complete']
      :value: 'stream_complete'



.. py:class:: StreamError(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Error in message streaming.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: error_code
      :type:  Optional[str]
      :value: None



   .. py:attribute:: error_message
      :type:  str


   .. py:attribute:: step_id
      :type:  str


   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: type
      :type:  Literal['stream_error']
      :value: 'stream_error'



.. py:class:: TaskHistory(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Task execution history with messages and metadata.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:method:: add_message(message: Message) -> None

      Add a message to the history.



   .. py:method:: add_step(step: TaskStep) -> None

      Add a task step to the history.



   .. py:attribute:: created_at
      :type:  datetime.datetime
      :value: None



   .. py:attribute:: messages
      :type:  List[Message]
      :value: None



   .. py:attribute:: steps
      :type:  List[TaskStep]
      :value: None



   .. py:attribute:: task_id
      :type:  str


   .. py:attribute:: updated_at
      :type:  datetime.datetime
      :value: None



.. py:class:: TaskStep(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   A single step in a task's conversation history.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: parts
      :type:  List[ConversationPart]


   .. py:attribute:: step_id
      :type:  str
      :value: None



   .. py:attribute:: timestamp
      :type:  datetime.datetime
      :value: None



.. py:class:: TextPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Text content part with language and confidence support.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: confidence
      :type:  Optional[float]
      :value: None



   .. py:attribute:: language
      :type:  Optional[str]
      :value: None



   .. py:attribute:: text
      :type:  str


   .. py:attribute:: type
      :type:  Literal['text']
      :value: 'text'



.. py:class:: ToolCallPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Tool call request part - conversation representation.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: args
      :type:  Dict[str, Any]


   .. py:attribute:: expected_output_type
      :type:  Optional[str]
      :value: None



   .. py:attribute:: tool_call_id
      :type:  str


   .. py:attribute:: tool_name
      :type:  str


   .. py:attribute:: type
      :type:  Literal['tool_call']
      :value: 'tool_call'



.. py:class:: ToolResultPart(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Tool execution result part.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: is_error
      :type:  bool
      :value: False



   .. py:attribute:: result
      :type:  Any


   .. py:attribute:: tool_call_id
      :type:  str


   .. py:attribute:: tool_name
      :type:  str


   .. py:attribute:: type
      :type:  Literal['tool_result']
      :value: 'tool_result'



.. py:class:: UserMessage(/, **data: Any)

   Bases: :py:obj:`Message`


   User message - alias for Message with role='user'.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: role
      :type:  Literal['user']
      :value: 'user'



.. py:data:: ConversationPart

