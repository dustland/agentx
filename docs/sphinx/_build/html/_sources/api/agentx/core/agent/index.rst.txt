agentx.core.agent
=================

.. py:module:: agentx.core.agent


Attributes
----------

.. autoapisummary::

   agentx.core.agent.logger


Classes
-------

.. autoapisummary::

   agentx.core.agent.Agent
   agentx.core.agent.AgentState


Functions
---------

.. autoapisummary::

   agentx.core.agent.create_assistant_agent


Module Contents
---------------

.. py:class:: Agent(config: agentx.core.config.AgentConfig, tool_manager=None)

   Represents an autonomous agent that manages its own conversation flow.

   Key Principles:
   - Each agent is autonomous and manages its own conversation flow
   - Agents communicate with other agents through public interfaces only
   - The brain is private to the agent - no external access
   - Tool execution is handled by orchestrator for security and control

   This combines:
   - AgentConfig (configuration data)
   - Brain (private LLM interaction)
   - Conversation management (delegates tool execution to orchestrator)

   Initialize agent with configuration and optional tool manager.

   :param config: Agent configuration
   :param tool_manager: Optional tool manager (injected by TaskExecutor)


   .. py:method:: __repr__() -> str


   .. py:method:: __str__() -> str


   .. py:method:: add_tool(tool)

      Add a tool to the agent's capabilities.



   .. py:method:: build_system_prompt(context: Dict[str, Any] = None) -> str

      Build the system prompt for the agent, including dynamic context and tool definitions.



   .. py:method:: generate_response(messages: List[Dict[str, Any]], system_prompt: Optional[str] = None, orchestrator=None, max_tool_rounds: int = 10) -> str
      :async:


      Generate response with tool execution handled by orchestrator.

      This is a simpler, non-streaming version that returns the final response.

      :param messages: Conversation messages in LLM format
      :param system_prompt: Optional system prompt override
      :param orchestrator: Orchestrator instance for tool execution
      :param max_tool_rounds: Maximum tool execution rounds

      :returns: Final response string



   .. py:method:: get_capabilities() -> Dict[str, Any]

      Get agent capabilities summary.



   .. py:method:: get_tools_json() -> List[Dict[str, Any]]

      Get the JSON schemas for the tools available to this agent.



   .. py:method:: remove_tool(tool_name: str)

      Remove a tool from the agent's capabilities.



   .. py:method:: reset_state()

      Reset agent state.



   .. py:method:: stream_response(messages: List[Dict[str, Any]], system_prompt: Optional[str] = None, orchestrator=None, max_tool_rounds: int = 10) -> AsyncGenerator[str, None]
      :async:


      Stream response with tool execution handled by orchestrator.

      This matches Brain's interface but includes tool execution loop.

      :param messages: Conversation messages in LLM format
      :param system_prompt: Optional system prompt override
      :param orchestrator: Orchestrator instance for tool execution
      :param max_tool_rounds: Maximum tool execution rounds

      :Yields: Response chunks and tool execution status updates



   .. py:method:: update_config(**kwargs)

      Update agent configuration.



   .. py:attribute:: brain


   .. py:attribute:: config


   .. py:attribute:: description


   .. py:attribute:: max_iterations


   .. py:attribute:: memory_enabled


   .. py:attribute:: name


   .. py:attribute:: state


   .. py:attribute:: tool_manager
      :value: None



   .. py:attribute:: tools


.. py:class:: AgentState(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Current state of an agent during execution.

   Create a new model by parsing and validating input data from keyword arguments.

   Raises [`ValidationError`][pydantic_core.ValidationError] if the input data cannot be
   validated to form a valid model.

   `self` is explicitly positional-only to allow `self` as a field name.


   .. py:attribute:: agent_name
      :type:  str


   .. py:attribute:: current_step_id
      :type:  Optional[str]
      :value: None



   .. py:attribute:: errors_encountered
      :type:  int
      :value: 0



   .. py:attribute:: is_active
      :type:  bool
      :value: False



   .. py:attribute:: last_response
      :type:  Optional[str]
      :value: None



   .. py:attribute:: last_response_timestamp
      :type:  Optional[datetime.datetime]
      :value: None



   .. py:attribute:: metadata
      :type:  Dict[str, Any]
      :value: None



   .. py:attribute:: tokens_used
      :type:  int
      :value: 0



   .. py:attribute:: tool_calls_made
      :type:  int
      :value: 0



.. py:function:: create_assistant_agent(name: str, system_message: str = '') -> Agent

   Create a simple assistant agent with default configuration.


.. py:data:: logger

