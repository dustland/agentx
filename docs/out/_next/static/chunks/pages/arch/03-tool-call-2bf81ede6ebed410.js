(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[454],{706:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/arch/03-tool-call",function(){return t(9348)}])},9348:function(e,n,t){"use strict";t.r(n),t.d(n,{__toc:function(){return c}});var s=t(5893),i=t(2673),o=t(8124),r=t(4509);t(4759);var l=t(2643),a=t(8757);let c=[{depth:2,value:"1. Overview and Core Principles",id:"1-overview-and-core-principles"},{depth:2,value:"2. Tool Definition and Registration",id:"2-tool-definition-and-registration"},{depth:3,value:"2.1. Tool Definition",id:"21-tool-definition"},{depth:3,value:"2.2. Tool Registration and Schema Generation",id:"22-tool-registration-and-schema-generation"},{depth:2,value:"3. The Tool Call Lifecycle",id:"3-the-tool-call-lifecycle"},{depth:2,value:"4. Security Architecture: The Sandbox",id:"4-security-architecture-the-sandbox"},{depth:2,value:"5. Extensibility",id:"5-extensibility"},{depth:3,value:"5.1. Custom and Built-in Tools",id:"51-custom-and-built-in-tools"},{depth:3,value:"5.2. MCP (Multi-Agent Communication Protocol) Integration",id:"52-mcp-multi-agent-communication-protocol-integration"}];function h(e){let n=Object.assign({h1:"h1",h2:"h2",p:"p",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre",code:"code",span:"span",ol:"ol"},(0,l.a)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"Tool Call and Execution"}),"\n",(0,s.jsx)(n.h2,{id:"1-overview-and-core-principles",children:"1. Overview and Core Principles"}),"\n",(0,s.jsx)(n.p,{children:"This document details the architecture for defining, executing, and managing tools within AgentX. It is designed to be secure, robust, and extensible. The core principles are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security First"}),": Untrusted code (LLM-generated shell commands) must never execute directly on the host machine. All tool execution is centralized and sandboxed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Robust Self-Correction"}),": LLM-generated tool calls can be malformed. The system must be able to detect this, provide corrective feedback to the LLM, and allow it to fix its own mistakes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Structured and Extensible"}),": All tools are strongly-typed and their schemas are automatically generated. The system is designed to easily accommodate new types of tools, including custom user-defined functions and external integrations."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"2-tool-definition-and-registration",children:"2. Tool Definition and Registration"}),"\n",(0,s.jsx)(n.p,{children:'A "tool" is a capability that an agent can call. This can be a Python function or a shell command.'}),"\n",(0,s.jsx)(n.h3,{id:"21-tool-definition",children:"2.1. Tool Definition"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Python Functions"}),": Any Python function can be turned into a tool. The function must have type hints for all its arguments and a clear docstring. The docstring is critical as it is used in the prompt to tell the agent what the tool does."]}),"\n",(0,s.jsx)(n.pre,{"data-language":"python","data-theme":"default",children:(0,s.jsxs)(n.code,{"data-language":"python","data-theme":"default",children:[(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"def"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"write_file"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-parameter)"},children:"path"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"str"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-parameter)"},children:"content"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"str"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:") "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"->"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"str"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:":"})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:'"""Writes content to a file at the specified path."""'})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"# ... implementation ..."})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"f"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"\"File '"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"{"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"path"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"}"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:"' written successfully.\""})]})]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Shell Commands"}),": Shell commands are defined with a name, description, and an argument schema. The agent's LLM will generate the command string based on the arguments."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"22-tool-registration-and-schema-generation",children:"2.2. Tool Registration and Schema Generation"}),"\n",(0,s.jsxs)(n.p,{children:["Tools are made available to agents via a central ",(0,s.jsx)(n.code,{children:"ToolRegistry"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Decorator-Based Registration"}),": The ",(0,s.jsx)(n.code,{children:"@register_tool"})," decorator is the primary mechanism for adding a tool to the registry."]}),"\n",(0,s.jsx)(n.pre,{"data-language":"python","data-theme":"default",children:(0,s.jsxs)(n.code,{"data-language":"python","data-theme":"default",children:[(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"from"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" agentx"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"core"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"tool "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"import"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" register_tool"})]}),"\n",(0,s.jsx)(n.span,{className:"line",children:" "}),"\n",(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"@register_tool"})}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"def"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"write_file"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-parameter)"},children:"path"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"str"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-parameter)"},children:"content"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"str"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:") "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:"->"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"str"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:":"})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"# ..."})]})]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Automatic Schema Generation"}),": When a function is decorated, the ",(0,s.jsx)(n.code,{children:"ToolRegistry"})," automatically inspects its signature and docstring to create a JSON schema. This schema is what the LLM sees and uses to construct a valid tool call. For the ",(0,s.jsx)(n.code,{children:"write_file"})," example, the generated schema would look like this:"]}),"\n",(0,s.jsx)(n.pre,{"data-language":"json","data-theme":"default",children:(0,s.jsxs)(n.code,{"data-language":"json","data-theme":"default",children:[(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"{"})}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"name"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"write_file"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"description"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"Writes content to a file at the specified path."'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"parameters"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" {"})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"type"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"object"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"properties"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" {"})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"      "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"path"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" { "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"type"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"string"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" }"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"      "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"content"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" { "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"type"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"string"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" }"})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    }"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:'"required"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" ["}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"path"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-string-expression)"},children:'"content"'}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"]"})]}),"\n",(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  }"})}),"\n",(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"3-the-tool-call-lifecycle",children:"3. The Tool Call Lifecycle"}),"\n",(0,s.jsx)(n.p,{children:"The following diagram and steps describe the end-to-end flow of a tool call, from generation to result."}),"\n",(0,s.jsx)(a.G,{chart:'graph TD\n    subgraph "Agent"\n        A[Brain] -- "1 Generates Tool Call" --> B(Agent Core)\n    end\n\n    subgraph "Orchestration Layer"\n        C[Orchestrator]\n        D[ToolRegistry]\n        E[ToolExecutor]\n    end\n\n    subgraph "Execution Environment"\n        F[Python Function]\n        G[Sandbox] -- "Executes Command" --> H(Shell Command)\n    end\n\n    B -- "2 Delegates Call" --> C\n    C -- "3 Validates against Schema" --> D\n    C -- "4a Validation FAILED" --> B\n    B -- "4b Sends Error to LLM for Correction" --> A\n\n    C -- "5 Validation PASSED<br/>Dispatches for Execution" --> E\n\n    E -- "6a Python Tool" --> F\n    E -- "6b Shell Tool" --> G\n\n    F -- "7a Result" --> E\n    H -- "7b stdout/stderr" --> G\n    G -- "7c Result" --> E\n\n    E -- "8 Returns Structured Result" --> C\n    C -- "9 Forwards Result" --> B\n    B -- "10 Formats for LLM &<br/>Adds to Context" --> A'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step-by-Step Flow:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Generation (Agent Brain)"}),": The ",(0,s.jsx)(n.code,{children:"Orchestrator"})," provides the ",(0,s.jsx)(n.code,{children:"Brain"})," (LLM) with the conversation history and a list of available tool schemas. The LLM determines a tool call is needed and generates the call in a structured format (e.g., JSON)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Delegation (Agent Core)"}),": The ",(0,s.jsx)(n.code,{children:"Agent"}),"'s core logic receives the raw text from the LLM, parses out the tool call request, and delegates it to the ",(0,s.jsx)(n.code,{children:"Orchestrator"})," for execution. ",(0,s.jsx)(n.strong,{children:"The agent itself has no permission to execute tools."})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Validation (Orchestrator)"}),": The ",(0,s.jsx)(n.code,{children:"Orchestrator"})," receives the tool call. It retrieves the corresponding schema from the ",(0,s.jsx)(n.code,{children:"ToolRegistry"})," and validates the call. It checks for missing required arguments, incorrect types, etc."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Self-Correction Loop (If Validation Fails)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If validation fails, the ",(0,s.jsx)(n.code,{children:"Orchestrator"})," does ",(0,s.jsx)(n.strong,{children:"not"})," attempt to run the tool."]}),"\n",(0,s.jsx)(n.li,{children:"It generates a structured error message (e.g., \"Validation Error: Missing required argument 'path' for tool 'write_file'\")."}),"\n",(0,s.jsxs)(n.li,{children:["This error is sent back to the ",(0,s.jsx)(n.code,{children:"Agent"}),", which in turn passes it back to the ",(0,s.jsx)(n.code,{children:"Brain"})," (LLM) in the next turn."]}),"\n",(0,s.jsx)(n.li,{children:"The LLM now has the context of its previous failed attempt and the specific validation error, allowing it to generate a corrected tool call."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dispatch (If Validation Succeeds)"}),": If the call is valid, the ",(0,s.jsx)(n.code,{children:"Orchestrator"})," dispatches it to the ",(0,s.jsx)(n.code,{children:"ToolExecutor"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Secure Execution (ToolExecutor)"}),": The ",(0,s.jsx)(n.code,{children:"ToolExecutor"})," inspects the tool type:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Python Function"}),": The call is a standard Python function call. It is executed directly in the main process."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shell Command"}),": The command is executed inside a secure, isolated sandbox."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Result Capturing"}),": The ",(0,s.jsx)(n.code,{children:"ToolExecutor"})," captures the result:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"For Python functions, this is the return value."}),"\n",(0,s.jsxs)(n.li,{children:["For shell commands, this includes ",(0,s.jsx)(n.code,{children:"stdout"}),", ",(0,s.jsx)(n.code,{children:"stderr"}),", and the exit code."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Structured Result"}),": The result is packaged into a ",(0,s.jsx)(n.code,{children:"ToolResult"})," object and returned to the ",(0,s.jsx)(n.code,{children:"Orchestrator"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Forwarding"}),": The ",(0,s.jsx)(n.code,{children:"Orchestrator"})," forwards the ",(0,s.jsx)(n.code,{children:"ToolResult"})," to the originating ",(0,s.jsx)(n.code,{children:"Agent"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Contextualization"}),": The ",(0,s.jsx)(n.code,{children:"Agent"})," formats the result into a clear, readable format (e.g., ",(0,s.jsx)(n.code,{children:"<tool_result tool_name=\"write_file\">File 'test.txt' written successfully.</tool_result>"}),") and adds it to the conversation history for the ",(0,s.jsx)(n.code,{children:"Brain"}),"'s next turn. The LLM can then use this result to form its final response to the user."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"4-security-architecture-the-sandbox",children:"4. Security Architecture: The Sandbox"}),"\n",(0,s.jsx)(n.p,{children:"Executing arbitrary, LLM-generated shell commands is a major security risk. AgentX mitigates this by using a sandboxed execution environment."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Technology"}),": The default implementation uses ",(0,s.jsx)(n.strong,{children:"Docker containers"}),". Each shell tool execution spins up a new, short-lived container."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Isolation"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network"}),": Containers run with networking disabled by default (",(0,s.jsx)(n.code,{children:"--net=none"}),") to prevent exfiltration of data or attacks on the local network. Tools that explicitly need network access must be granted it."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Filesystem"}),": The container is only granted access to the current task's workspace directory (",(0,s.jsx)(n.code,{children:"/app/workspace"}),"). It cannot read from or write to any other part of the host filesystem."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Permissions"}),": The process inside the container runs as a non-root user to limit its privileges even within the sandbox."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"5-extensibility",children:"5. Extensibility"}),"\n",(0,s.jsx)(n.h3,{id:"51-custom-and-built-in-tools",children:"5.1. Custom and Built-in Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Built-in Tools"}),": AgentX provides a core set of safe tools for file I/O, search, etc., located in ",(0,s.jsx)(n.code,{children:"src/agentx/builtin_tools/"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Tools"}),": Users can easily define their own tools in their project's codebase. As long as the file is imported and the functions are decorated with ",(0,s.jsx)(n.code,{children:"@register_tool"}),", they will be available to the agents."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"52-mcp-multi-agent-communication-protocol-integration",children:"5.2. MCP (Multi-Agent Communication Protocol) Integration"}),"\n",(0,s.jsx)(n.p,{children:"The tool architecture is extensible to other protocols. An MCP tool could be implemented as a special Python function:"}),"\n",(0,s.jsx)(n.pre,{"data-language":"python","data-theme":"default",children:(0,s.jsxs)(n.code,{"data-language":"python","data-theme":"default",children:[(0,s.jsx)(n.span,{className:"line",children:(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"@register_tool"})}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-keyword)"},children:"def"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-function)"},children:"send_mcp_message"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-parameter)"},children:"recipient_agent"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"str"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:","}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-parameter)"},children:"message_body"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-punctuation)"},children:":"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-constant)"},children:"str"}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"):"})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:'"""Sends a message to another agent using the MCP protocol."""'})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"# Logic to connect to MCP broker and send message"})]}),"\n",(0,s.jsxs)(n.span,{className:"line",children:[(0,s.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,s.jsx)(n.span,{style:{color:"var(--shiki-token-comment)"},children:"# ..."})]})]})}),"\n",(0,s.jsxs)(n.p,{children:["To the ",(0,s.jsx)(n.code,{children:"Orchestrator"})," and ",(0,s.jsx)(n.code,{children:"Agent"}),", this is just another tool. The implementation details are abstracted away."]})]})}let d={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.a)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)},pageOpts:{filePath:"pages/arch/03-tool-call.mdx",route:"/arch/03-tool-call",pageMap:[{kind:"Meta",data:{index:"Home","get-started":"Quick Start",arch:"Architecture",api:"API Reference"}},{kind:"Folder",name:"arch",route:"/arch",children:[{kind:"MdxPage",name:"00-requirements",route:"/arch/00-requirements"},{kind:"MdxPage",name:"01-architecture",route:"/arch/01-architecture"},{kind:"MdxPage",name:"02-state-and-context",route:"/arch/02-state-and-context"},{kind:"MdxPage",name:"03-tool-call",route:"/arch/03-tool-call"},{kind:"MdxPage",name:"04-communication",route:"/arch/04-communication"},{kind:"Meta",data:{"00-requirements":"Requirements","01-architecture":"System Architecture","02-state-and-context":"State & Context","03-tool-call":"Tool Calling","04-communication":"Communication"}}]},{kind:"MdxPage",name:"get-started",route:"/get-started"},{kind:"MdxPage",name:"index",route:"/"}],flexsearch:{codeblocks:!0},title:"Tool Call and Execution",headings:c},pageNextRoute:"/arch/03-tool-call",nextraLayout:o.ZP,themeConfig:r.Z};n.default=(0,i.j)(d)},5789:function(){},4509:function(e,n,t){"use strict";var s=t(5893);n.Z={github:"https://github.com/dustland/agentx",docsRepositoryBase:"https://github.com/dustland/agentx/blob/main/docs",titleSuffix:" – AgentX",logo:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("span",{className:"mr-2 font-extrabold hidden md:inline",children:"AgentX"}),(0,s.jsx)("span",{className:"text-gray-600 font-normal hidden md:inline",children:"The next-generation framework for autonomous multi-agent systems"})]}),head:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("meta",{name:"msapplication-TileColor",content:"#ffffff"}),(0,s.jsx)("meta",{name:"theme-color",content:"#ffffff"}),(0,s.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),(0,s.jsx)("meta",{httpEquiv:"Content-Language",content:"en"}),(0,s.jsx)("meta",{name:"description",content:"AgentX - Build, orchestrate, and scale AI agents with unprecedented simplicity and power"}),(0,s.jsx)("meta",{name:"og:description",content:"AgentX - Build, orchestrate, and scale AI agents with unprecedented simplicity and power"}),(0,s.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,s.jsx)("meta",{name:"twitter:site:domain",content:"dustland.github.io"}),(0,s.jsx)("meta",{name:"twitter:url",content:"https://dustland.github.io/agentx"}),(0,s.jsx)("meta",{name:"og:title",content:"AgentX: Next-generation multi-agent framework"}),(0,s.jsx)("meta",{name:"apple-mobile-web-app-title",content:"AgentX"}),(0,s.jsx)("link",{rel:"icon",type:"image/png",sizes:"32x32",href:"/favicon-32x32.png"}),(0,s.jsx)("link",{rel:"icon",type:"image/png",sizes:"16x16",href:"/favicon-16x16.png"})]}),search:!0,prevLinks:!0,nextLinks:!0,footer:!0,footerEditLink:"Edit this page on GitHub",footerText:(0,s.jsxs)(s.Fragment,{children:["MIT ",new Date().getFullYear()," \xa9 Dustland Team."]}),unstable_faviconGlyph:"\uD83E\uDD16",primaryHue:220,primarySaturation:100}}},function(e){e.O(0,[163,520,95,888,774,179],function(){return e(e.s=706)}),_N_E=e.O()}]);