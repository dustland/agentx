name: Auto Release

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for commit analysis
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml gitpython

      - name: Get current version
        id: current_version
        run: |
          python -c "
          import toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)
          print(f'version={data[\"project\"][\"version\"]}')
          " >> $GITHUB_OUTPUT

      - name: Get last release tag
        id: last_release
        run: |
          # Get the latest release tag, fallback to first commit if no releases
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "Last release tag: $LAST_TAG"

      - name: Analyze commits and determine version bump
        id: version_bump
        run: |
          python -c "
          import subprocess
          import re
          import toml
          import os

          # Get commits since last release
          last_tag = '${{ steps.last_release.outputs.tag }}'
          try:
              if last_tag.startswith('v'):
                  # If we have a proper tag, get commits since that tag
                  result = subprocess.run(['git', 'log', f'{last_tag}..HEAD', '--oneline'],
                                        capture_output=True, text=True)
              else:
                  # If no tags, get all commits
                  result = subprocess.run(['git', 'log', '--oneline'],
                                        capture_output=True, text=True)
              commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
          except:
              commits = []

          print(f'Found {len(commits)} commits since last release')

          # Skip if no new commits
          if not commits or (len(commits) == 1 and not commits[0].strip()):
              print('No new commits found, skipping release')
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write('skip=true\n')
              exit(0)

          # Analyze commit messages for version bump type
          has_feat = False
          has_changes = False

          for commit in commits:
              if commit.strip():
                  has_changes = True
                  print(f'Commit: {commit}')
                  # Check for feat: prefix (case insensitive)
                  if re.match(r'^[a-f0-9]+\s+(feat|feature)(\(.*\))?:', commit, re.IGNORECASE):
                      has_feat = True
                      print('  -> Found feat commit')

          if not has_changes:
              print('No meaningful commits found, skipping release')
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write('skip=true\n')
              exit(0)

          # Determine bump type
          bump_type = 'minor' if has_feat else 'patch'
          print(f'Determined bump type: {bump_type}')

          # Calculate new version (0.minor.patch format)
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)

          current_version = data['project']['version']
          major, minor, patch = map(int, current_version.split('.'))

          # Always keep major at 0, bump minor for feat, patch for others
          if bump_type == 'minor':
              new_version = f'0.{minor + 1}.0'
          else:
              new_version = f'0.{minor}.{patch + 1}'

          print(f'Version bump: {bump_type}')
          print(f'New version: {new_version}')

          # Write to GITHUB_OUTPUT
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'version_bump={bump_type}\n')
              f.write(f'new_version={new_version}\n')
              f.write('skip=false\n')
          "

      - name: Skip release if no changes
        if: steps.version_bump.outputs.skip == 'true'
        run: |
          echo "No new commits found, skipping release"
          exit 0

      - name: Update version in pyproject.toml and __init__.py
        if: steps.version_bump.outputs.skip != 'true'
        run: |
          python -c "
          import toml
          import re

          new_version = '${{ steps.version_bump.outputs.new_version }}'

          # Update pyproject.toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)

          data['project']['version'] = new_version

          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)

          print(f'Updated pyproject.toml version to {new_version}')

          # Update src/vibex/__init__.py
          init_file = 'src/vibex/__init__.py'
          with open(init_file, 'r') as f:
              content = f.read()

          # Replace __version__ = 'x.x.x' with new version
          updated_content = re.sub(
              r'__version__\s*=\s*[\"\']\d+\.\d+\.\d+[\"\']',
              f'__version__ = \"{new_version}\"',
              content
          )

          with open(init_file, 'w') as f:
              f.write(updated_content)

          print(f'Updated __init__.py version to {new_version}')
          "

      - name: Generate release notes from commits
        if: steps.version_bump.outputs.skip != 'true'
        id: release_notes
        run: |
          python -c "
          import subprocess
          import re
          from datetime import datetime

          # Get commits since last release
          last_tag = '${{ steps.last_release.outputs.tag }}'
          try:
              if last_tag.startswith('v'):
                  result = subprocess.run(['git', 'log', f'{last_tag}..HEAD', '--pretty=format:%H|%s|%an|%ad', '--date=short'],
                                        capture_output=True, text=True)
              else:
                  result = subprocess.run(['git', 'log', '--pretty=format:%H|%s|%an|%ad', '--date=short'],
                                        capture_output=True, text=True)
              commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
          except:
              commits = []

          # Categorize commits
          features = []
          fixes = []
          docs = []
          other = []

          for commit in commits:
              if not commit.strip():
                  continue

              parts = commit.split('|')
              if len(parts) >= 2:
                  hash_short = parts[0][:7]
                  message = parts[1]
                  author = parts[2] if len(parts) > 2 else 'Unknown'

                  # Categorize by conventional commit format
                  if re.match(r'^(feat|feature)(\(.*\))?:', message, re.IGNORECASE):
                      features.append(f'- {message} ({hash_short})')
                  elif re.match(r'^fix(\(.*\))?:', message, re.IGNORECASE):
                      fixes.append(f'- {message} ({hash_short})')
                  elif re.match(r'^docs?(\(.*\))?:', message, re.IGNORECASE):
                      docs.append(f'- {message} ({hash_short})')
                  else:
                      other.append(f'- {message} ({hash_short})')

          # Build release notes
          notes = []
          notes.append('## What\'s Changed')
          notes.append('')

          if features:
              notes.append('### ‚ú® New Features')
              notes.extend(features)
              notes.append('')

          if fixes:
              notes.append('### üêõ Bug Fixes')
              notes.extend(fixes)
              notes.append('')

          if docs:
              notes.append('### üìö Documentation')
              notes.extend(docs)
              notes.append('')

          if other:
              notes.append('### üîß Other Changes')
              notes.extend(other)
              notes.append('')

          notes.append('---')
          notes.append('')
          notes.append('**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.last_release.outputs.tag }}...v${{ steps.version_bump.outputs.new_version }}')

          release_notes = '\n'.join(notes)

          # Write to file for GitHub output (handle multiline)
          with open('release_notes.txt', 'w') as f:
              f.write(release_notes)

          print('Release notes generated successfully')
          "

      - name: Commit version update
        if: steps.version_bump.outputs.skip != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml src/vibex/__init__.py
          git commit -m "chore: bump version to ${{ steps.version_bump.outputs.new_version }} [skip deploy]"
          git push

      - name: Create GitHub Release
        if: steps.version_bump.outputs.skip != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version_bump.outputs.new_version }}
          name: Release v${{ steps.version_bump.outputs.new_version }}
          body_path: release_notes.txt
          draft: false
          prerelease: false

      - name: Output release info
        if: steps.version_bump.outputs.skip != 'true'
        run: |
          echo "üéâ Released version ${{ steps.version_bump.outputs.new_version }}"
          echo "üìù Release notes:"
          cat release_notes.txt

      - name: Build Python package
        if: steps.version_bump.outputs.skip != 'true'
        run: |
          python -m pip install --upgrade build setuptools wheel
          python -m build

      - name: Publish to PyPI
        if: steps.version_bump.outputs.skip != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      - name: Output PyPI publish info
        if: steps.version_bump.outputs.skip != 'true'
        run: |
          echo "üì¶ Published to PyPI: https://pypi.org/project/vibex/${{ steps.version_bump.outputs.new_version }}/"
