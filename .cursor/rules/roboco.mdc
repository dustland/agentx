---
description: 
globs: *.py
alwaysApply: false
---
---
description: Guidelines for Python Development with FastAPI, Pydantic, and AG2 Framework
globs: ["**/*.py"]
alwaysApply: false
---

# Python Development Guidelines

## Code Style
- Adhere to ](https://www.python.org/dev/peps/pep-0008/) for consistent code formatting.
- Use descriptive variable and function names with lowercase and underscores (e.g., `is_active`, `has_permission`).
- Limit line length to 79 characters.
- Use meaningful docstrings for all modules, classes, and functions.

## Functions and Methods
- Use `def` for synchronous functions and `async def` for asynchronous functions.
- Include type hints for all function signatures to enhance code clarity and tooling support.
- Apply the Receive an Object, Return an Object (RORO) pattern for function inputs and outputs.
- Keep functions focused on a single responsibility.
- Provide default values for optional parameters when sensible.

## Error Handling
- Utilize FastAPI's `HTTPException` for expected errors, specifying appropriate status codes and detail messages.
- Implement middleware to handle unexpected errors, ensuring they are logged and monitored effectively.
- Use specific exception types rather than generic exceptions.
- Log detailed error information for debugging purposes.

## Dependencies
- Manage project dependencies with [uv](mdc:roboco_workspace/https:/github.com/astral-sh/uv) for consistent environments.
- Use asynchronous database libraries like `asyncpg` or `aiomysql` for non-blocking database operations.
- If employing ORM features, adopt SQLAlchemy 2.0 with its async support.
- Specify version constraints for dependencies to ensure compatibility.

## AG2 Framework
- Utilize AG2's multi-agent conversation framework to build LLM workflows.
- Leverage AG2's enhanced LLM inference APIs to improve performance and reduce costs.
- Explore AG2's collection of working systems across various domains to inspire and guide application development.
- Make use of handoff patterns for effective agent collaboration.
- When generating code related to AG2/autogen framework, you should always look into the source to make sure the correctness of the usage.

## Agent Design Patterns
- Use the singleton pattern for factories and services that shoupplor e.glempproach to agent registration and discovery.
- Design agents to be modular and extensible.

## References
- [FastAPI Documentation](mdc:roboco_workspace/https:/fastapi.tiangolo.com)
- [Pydantic Documentation](mdc:roboco_workspace/https:/docs.pydantic.dev)
- [SQLAlchemy 2.0 Documentation](mdc:roboco_workspace/https:/docs.sqlalchemy.org/en/20)
- [AG2 GitHub Repository](mdc:roboco_workspace/https:/github.com/ag2ai/ag2)
- [AG2 Documentation](mdc:roboco_workspace/https:/docs.ag2.ai)