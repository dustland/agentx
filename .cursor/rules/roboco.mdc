---
description: 
globs: *.py
alwaysApply: false
---
Description: Guidelines for Python Development with FastAPI, Pydantic, and AG2 Framework
Globs: ["**/*.py"]

# Python Development Guidelines

## Code Style
- Adhere to ](https://www.python.org/dev/peps/pep-0008/) for consistent code formatting.
- Use descriptive variable and function names with lowercase and underscores (e.g., `is_active`, `has_permission`).
- Limit line length to 79 characters.

## Project Structure
- Organize code into modules and packages reflecting their functionality.
- Place FastAPI routers in a `routers/` directory (e.g., `routers/user.py`).
- Store Pydantic models in a `models/` directory (e.g., `models/user.py`).
- Keep utility functions in a `utils/` directory (e.g., `utils/helpers.py`).

## Functions and Methods
- Use `def` for synchronous functions and `async def` for asynchronous functions.
- Include type hints for all function signatures to enhance code clarity and tooling support.
- Apply the Receive an Object, Return an Object (RORO) pattern for function inputs and outputs.

## Error Handling
- Utilize FastAPI's `HTTPException` for expected errors, specifying appropriate status codes and detail messages.
- Implement middleware to handle unexpected errors, ensuring they are logged and monitored effectively.

## Depes
- Manage project dependencies with [Poetry](mdc:https:/python-poetry.org) for consistent environments.
- Use asynchronous database libraries like `asyncpg` or `aiomysql` for non-blocking database operations.
- If employing ORM features, adopt SQLAlchemy 2.0 with its async support.

## Performance Optimization
- Employ caching strategies using tools like Redis for frequently accessed data.
- Optimize data serialization and deserialization with Pydantic's efficient parsing methods.
- Implement lazy loading techniques for large datasets to improve performance.

## AG2 Framework Ine yourselmework by reviewing the [AG2 GitHub Repository](mdc:https:/github.com/ag2ai/ag2)cs.ag2.ai).
- Utilize AG2's multi-agent conversation framework to build LLM workflows. tps://docs.ag2.ai/docs/home/home)
- Leverage AG2's enhanced LLM inference APIs to improve performance and reduce cosithub.io](https://ag2ai.github.io/ag2/latest/docs/home/home/)
- Explore AG2's collection of working systems across various domains to inspire and guide application development. [oai_citation_attribution:2â€¡docs.ag2.ai](mdc:https:/docs.ag2.ai/docs/Use-Cases/agent_chat)

## References
- [FastAPI Documentation](mdc:https:/fastapi.tiangolo.com)
- [Pydantic Documentation](mdc:https:/docs.pydantic.dev)
- [SQLAlchemy 2.0 Documentation](mdc:https:/docs.sqlalchemy.org/en/20)
- [AG2 GitHub Repository](mdc:https:/github.com/ag2ai/ag2)
- [AG2 Documentation](mdc:https:/docs.ag2.ai)