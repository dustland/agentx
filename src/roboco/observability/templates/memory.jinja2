{% extends "base.jinja2" %}

{% block title %}Memory - Roboco Observability{% endblock %}

{% block content %}
<div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
        <div>
            <h1 class="text-3xl font-bold">Memory</h1>
            <p class="text-base-content/70 mt-1">Browse and search agent memory data</p>
        </div>
        
        <div class="flex space-x-2">
            <button 
                class="btn btn-outline btn-sm"
                onclick="refreshMemory()"
            >
                <i data-lucide="refresh-cw" class="w-4 h-4"></i>
                Refresh
            </button>
            
            <button 
                class="btn btn-outline btn-sm"
                onclick="exportMemory()"
            >
                <i data-lucide="download" class="w-4 h-4"></i>
                Export
            </button>
        </div>
    </div>

    {% if categories %}
    <!-- Memory Browser -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <!-- Categories Sidebar -->
        <div class="card bg-base-200 shadow-xl">
            <div class="card-body">
                <h2 class="card-title mb-4">
                    <i data-lucide="folder" class="w-5 h-5"></i>
                    Categories
                </h2>
                
                <!-- Search -->
                <div class="form-control mb-4">
                    <input 
                        type="text" 
                        placeholder="Search memory..." 
                        class="input input-bordered input-sm" 
                        id="memory-search"
                        onkeyup="debounceSearch()"
                    />
                </div>
                
                <!-- Category List -->
                <div class="space-y-1 max-h-96 overflow-y-auto custom-scrollbar">
                    <button 
                        class="btn btn-ghost btn-block justify-start category-item active"
                        onclick="selectCategory('all')"
                        data-category="all"
                    >
                        <i data-lucide="layers" class="w-4 h-4"></i>
                        <span>All Categories</span>
                    </button>
                    
                    {% for category in categories %}
                    <button 
                        class="btn btn-ghost btn-block justify-start category-item"
                        onclick="selectCategory('{{ category }}')"
                        data-category="{{ category }}"
                    >
                        <i data-lucide="folder" class="w-4 h-4"></i>
                        <span class="truncate">{{ category }}</span>
                    </button>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Memory Content -->
        <div class="lg:col-span-3">
            <div class="card bg-base-200 shadow-xl">
                <div class="card-body">
                    <div class="flex items-center justify-between mb-4">
                        <h2 class="card-title">
                            <i data-lucide="database" class="w-5 h-5"></i>
                            <span id="memory-title">All Memory Items</span>
                        </h2>
                        
                        <div class="badge badge-outline" id="memory-count">
                            Loading...
                        </div>
                    </div>
                    
                    <div id="memory-content" class="space-y-4 max-h-96 overflow-y-auto custom-scrollbar">
                        <div class="text-center py-8">
                            <span class="loading loading-spinner loading-md"></span>
                            <p class="mt-2">Loading memory data...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% else %}
    <!-- Empty State -->
    <div class="card bg-base-200 shadow-xl">
        <div class="card-body">
            <div class="text-center py-16 text-base-content/50">
                <i data-lucide="brain" class="w-24 h-24 mx-auto mb-6"></i>
                <h2 class="text-2xl font-bold mb-2">No Memory Data Found</h2>
                <p class="text-lg mb-4">Memory data will appear here after agents store information</p>
                <div class="space-y-2">
                    <p class="text-sm">Memory is created when:</p>
                    <ul class="text-sm space-y-1">
                        <li>• Agents save important information</li>
                        <li>• Tasks store context and results</li>
                        <li>• System events are recorded</li>
                        <li>• User interactions are logged</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    {% endif %}
</div>

<!-- Memory Item Details Modal -->
<dialog id="memory-details-modal" class="modal">
    <div class="modal-box w-11/12 max-w-4xl">
        <form method="dialog">
            <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
        </form>
        <h3 class="font-bold text-lg mb-4">Memory Item Details</h3>
        <div id="memory-details-content">
            <!-- Content will be loaded here -->
        </div>
    </div>
</dialog>
{% endblock %}

{% block scripts %}
<script>
    let currentCategory = 'all';
    let currentMemoryData = {};
    let searchTimeout = null;
    
    // Load memory data on page load
    document.addEventListener('DOMContentLoaded', function() {
        const hasCategories = {{ 'true' if categories else 'false' }};
        if (hasCategories) {
            loadMemoryData('all');
        }
    });
    
    // Select category
    function selectCategory(category) {
        currentCategory = category;
        
        // Update UI state
        document.querySelectorAll('.category-item').forEach(btn => {
            btn.classList.remove('btn-active');
        });
        const categoryBtn = document.querySelector('[data-category="' + category + '"]');
        if (categoryBtn) {
            categoryBtn.classList.add('btn-active');
        }
        
        // Update title
        const title = document.getElementById('memory-title');
        title.textContent = category === 'all' ? 'All Memory Items' : 'Category: ' + category;
        
        // Load data
        loadMemoryData(category);
    }
    
    // Load memory data
    function loadMemoryData(category) {
        const content = document.getElementById('memory-content');
        const count = document.getElementById('memory-count');
        
        // Show loading
        content.innerHTML = '<div class="text-center py-8"><span class="loading loading-spinner loading-md"></span><p class="mt-2">Loading memory data...</p></div>';
        count.textContent = 'Loading...';
        
        // Determine API endpoint
        if (category === 'all') {
            loadAllMemoryData();
            return;
        }
        
        const url = '/api/memory/category/' + encodeURIComponent(category);
        
        fetch(url)
            .then(response => response.json())
            .then(data => {
                currentMemoryData = data.memory_data || {};
                displayMemoryData(currentMemoryData);
                count.textContent = Object.keys(currentMemoryData).length + ' items';
            })
            .catch(error => {
                displayError(error.message);
                count.textContent = 'Error';
            });
    }
    
    // Load all memory data
    function loadAllMemoryData() {
        const categories = {{ categories|tojson if categories else '[]' }};
        const promises = categories.map(category => 
            fetch('/api/memory/category/' + encodeURIComponent(category))
                .then(response => response.json())
                .then(data => ({ category: category, data: data.memory_data || {} }))
        );
        
        Promise.all(promises)
            .then(results => {
                currentMemoryData = {};
                results.forEach(result => {
                    Object.assign(currentMemoryData, result.data);
                });
                displayMemoryData(currentMemoryData);
                document.getElementById('memory-count').textContent = Object.keys(currentMemoryData).length + ' items';
            })
            .catch(error => {
                displayError(error.message);
                document.getElementById('memory-count').textContent = 'Error';
            });
    }
    
    // Display memory data
    function displayMemoryData(memoryData) {
        const content = document.getElementById('memory-content');
        
        if (!memoryData || Object.keys(memoryData).length === 0) {
            content.innerHTML = '<div class="text-center py-8 text-base-content/50"><i data-lucide="inbox" class="w-12 h-12 mx-auto mb-2"></i><p>No memory items found</p><p class="text-sm">Try selecting a different category or check if data exists</p></div>';
            lucide.createIcons();
            return;
        }
        
        let html = '';
        Object.entries(memoryData).forEach(function(entry) {
            const key = entry[0];
            const data = entry[1];
            const timestamp = data.timestamp ? new Date(data.timestamp).toLocaleString() : 'Unknown';
            const category = data.category || 'general';
            const value = data.value || '';
            
            // Preview of the value
            let preview = '';
            if (typeof value === 'string') {
                preview = value.length > 100 ? value.substring(0, 100) + '...' : value;
            } else if (typeof value === 'object') {
                const jsonStr = JSON.stringify(value);
                preview = jsonStr.length > 100 ? jsonStr.substring(0, 100) + '...' : jsonStr;
            } else {
                preview = String(value);
            }
            
            html += '<div class="card bg-base-100 shadow-sm hover:shadow-md transition-shadow cursor-pointer" onclick="showMemoryDetails(\'' + key + '\')"><div class="card-body p-4"><div class="flex items-start justify-between mb-2"><h3 class="font-bold text-sm truncate flex-grow mr-2">' + key + '</h3><div class="badge badge-outline badge-xs">' + category + '</div></div><p class="text-sm text-base-content/70 mb-2 line-clamp-2">' + preview + '</p><div class="flex items-center justify-between text-xs text-base-content/50"><span>' + timestamp + '</span><div class="flex items-center space-x-1"><i data-lucide="eye" class="w-3 h-3"></i><span>View Details</span></div></div></div></div>';
        });
        
        content.innerHTML = html;
        lucide.createIcons();
    }
    
    // Display error
    function displayError(message) {
        const content = document.getElementById('memory-content');
        content.innerHTML = '<div class="alert alert-error"><i data-lucide="x-circle" class="w-5 h-5"></i><div><div class="font-bold">Failed to load memory data</div><div class="text-sm">' + message + '</div></div></div>';
        lucide.createIcons();
    }
    
    // Debounced search
    function debounceSearch() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(function() {
            const query = document.getElementById('memory-search').value.toLowerCase();
            if (query) {
                searchMemory(query);
            } else {
                loadMemoryData(currentCategory);
            }
        }, 300);
    }
    
    // Search memory
    function searchMemory(query) {
        const content = document.getElementById('memory-content');
        const count = document.getElementById('memory-count');
        
        content.innerHTML = '<div class="text-center py-8"><span class="loading loading-spinner loading-md"></span><p class="mt-2">Searching memory...</p></div>';
        
        fetch('/api/memory/search?q=' + encodeURIComponent(query))
            .then(response => response.json())
            .then(data => {
                currentMemoryData = data.results || {};
                displayMemoryData(currentMemoryData);
                count.textContent = Object.keys(currentMemoryData).length + ' results';
                document.getElementById('memory-title').textContent = 'Search: "' + query + '"';
            })
            .catch(error => {
                displayError(error.message);
                count.textContent = 'Error';
            });
    }
    
    // Show memory details
    function showMemoryDetails(key) {
        const memoryItem = currentMemoryData[key];
        if (!memoryItem) return;
        
        const modal = document.getElementById('memory-details-modal');
        const content = document.getElementById('memory-details-content');
        
        const timestamp = memoryItem.timestamp ? new Date(memoryItem.timestamp).toLocaleString() : 'Unknown';
        const category = memoryItem.category || 'general';
        const value = memoryItem.value || '';
        
        const valueDisplay = typeof value === 'object' ? 
            '<pre class="text-sm"><code>' + JSON.stringify(value, null, 2) + '</code></pre>' :
            '<div class="text-sm whitespace-pre-wrap">' + value + '</div>';
        
        content.innerHTML = '<div class="space-y-4"><div class="grid grid-cols-1 md:grid-cols-2 gap-4"><div><label class="label"><span class="label-text font-bold">Key</span></label><div class="font-mono text-sm bg-base-200 p-2 rounded">' + key + '</div></div><div><label class="label"><span class="label-text font-bold">Category</span></label><div class="badge badge-primary">' + category + '</div></div><div class="md:col-span-2"><label class="label"><span class="label-text font-bold">Timestamp</span></label><div class="text-sm">' + timestamp + '</div></div></div><div><label class="label"><span class="label-text font-bold">Content</span></label><div class="bg-base-200 p-4 rounded-lg max-h-64 overflow-y-auto custom-scrollbar">' + valueDisplay + '</div></div><div class="flex justify-end space-x-2"><button class="btn btn-outline btn-sm" onclick="copyToClipboard(\'' + key + '\')"><i data-lucide="copy" class="w-4 h-4"></i>Copy Content</button><button class="btn btn-outline btn-sm" onclick="exportMemoryItem(\'' + key + '\')"><i data-lucide="download" class="w-4 h-4"></i>Export Item</button></div></div>';
        
        modal.showModal();
        lucide.createIcons();
    }
    
    // Copy to clipboard
    function copyToClipboard(key) {
        const memoryItem = currentMemoryData[key];
        if (!memoryItem) return;
        
        const content = typeof memoryItem.value === 'object' ? 
            JSON.stringify(memoryItem.value, null, 2) : 
            String(memoryItem.value);
        
        navigator.clipboard.writeText(content).then(function() {
            showToast('Content copied to clipboard', 'success');
        }).catch(function() {
            showToast('Failed to copy content', 'error');
        });
    }
    
    // Export single memory item
    function exportMemoryItem(key) {
        const memoryItem = currentMemoryData[key];
        if (!memoryItem) return;
        
        const data = Object.assign({ key: key, exported_at: new Date().toISOString() }, memoryItem);
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'memory_' + key + '_' + new Date().toISOString().split('T')[0] + '.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        showToast('Memory item exported successfully', 'success');
    }
    
    // Refresh memory
    function refreshMemory() {
        loadMemoryData(currentCategory);
        showToast('Memory data refreshed', 'success');
    }
    
    // Export all memory
    function exportMemory() {
        if (!currentMemoryData || Object.keys(currentMemoryData).length === 0) {
            showToast('No memory data to export', 'warning');
            return;
        }
        
        const data = {
            memory_data: currentMemoryData,
            category: currentCategory,
            exported_at: new Date().toISOString(),
            total_items: Object.keys(currentMemoryData).length
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'memory_' + currentCategory + '_' + new Date().toISOString().split('T')[0] + '.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        showToast('Memory data exported successfully', 'success');
    }
</script>
{% endblock %} 